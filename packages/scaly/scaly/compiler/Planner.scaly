use scaly.containers
use scaly.io

define Planner
(
    program: ref[Program]
    intrinsics_builder: HashSetBuilder[String]
    types_list: List[Plan.Type]
    types_builder: HashMapBuilder[String, Plan.Type]
    functions_list: List[Plan.Function]
    functions_builder: HashMapBuilder[String, Plan.Function]
)
{
    init(program: ref[Program]) (program(program)) (intrinsics_builder(new_ HashSetBuilder[String]())) (types_builder(new_ HashMapBuilder[String, Plan.Type]())) (functions_builder(new_ HashMapBuilder[String, Plan.Function]())) {}

    function plan_program(this: Planner) returns Plan.Module throws PlannerError {
        var r Region()

        let file program.module_.file
        var path Path->get_directory_name(r.get_page(), file)
        if path.get_length() > 0
        {
            try let exists Directory->exists(ep, path)
                else throw

            if exists = false
            {
                try Directory->create(ep, path)
                    else throw
            }
        }

        try plan_module(ep, program.module_)
        else throw

        for module_ in program.module_.modules
        {
            try plan_module(ep, module_)
                else throw
        }

        return Plan->Module(path, program.module_.name, 
            new_ Vector[Plan.Type](rp, types_list),
            new_ HashMap[String, Plan.Type](rp, types_builder),
            new_ Vector[Plan.Function](rp, functions_list),
            new_ HashMap[String, Plan.Function](rp, functions_builder))
    }

function plan_module(this: Planner, module_: ref[Module]) throws PlannerError {
    var r Region()

    try plan_symbols(ep, module_.members)
        else throw

    return Void()
}

function plan_symbols(this: Planner, symbols: Vector[Member]) throws PlannerError {
    var r Region()

    for member in symbols
    {
        choose member
            when func: Member.Function
                try plan_function(ep, func)
                    else throw
            when concept: Member.Concept
                try plan_concept(ep, concept)
                    else throw
            when op: Member.Operator
                throw FeatureNotImplemented(String(ep, "operator symbol"))
            when p: Member.Package
                throw FeatureNotImplemented(String(ep, "package"))
    }

    return Void()
}

function plan_concept(this: Planner, concept: ref[Concept]) throws PlannerError { 
    choose concept.definition
        when ns: Definition.Namespace
            throw FeatureNotImplemented(String(ep, "namespace"))
        when structure: Definition.Structure
            throw FeatureNotImplemented(String(ep, "structure"))
        when i: Definition.Intrinsic
            return plan_intrinsic(ep, concept.name)
        when g: Definition.Global
            throw FeatureNotImplemented(String(ep, "global"))
        when u: Definition.Union
            throw FeatureNotImplemented(String(ep, "union"))
}

function plan_intrinsic(this: Planner, name: String) throws PlannerError {
    var r Region()

    if intrinsics_builder.contains(name)
        throw DuplicateIntrinsic(String(ep, name))
    
    intrinsics_builder.add(name)

    return Void()
}

function resolve_type(this: Planner, type: Type) returns String {
    return String(rp, *type.name.get(0))
}

function plan_function(this: Planner, func: ref[Function]) throws PlannerError {
    var r Region()

    choose func.implementation
        when action: Implementation.Action
        {
            if functions_builder.contains(func.name)
                throw DuplicateFunction(String(ep, func.name))

            var returnType resolve_type(get_page(), *func.returns_)
            var input_list: ref[List[Plan.Argument]] *new_ List[Plan.Argument]$()
            for item in func.input
            {
                input_list.add(Plan->Argument(*item.name, resolve_type(get_page(), *item.type)))
            }

            var blocks: ref[List[Plan.Block]] *new_ List[Plan.Block]$()

            var instructions: ref[List[Plan.Instruction]] *new_ List[Plan.Instruction]$()
            instructions.add(Plan->Instruction(Plan->FMul(String(get_page(), "a"), String(get_page(), "b"), String(get_page(), "_ret"))))
            instructions.add(Plan->Instruction(Plan->Ret(String(get_page(), "_ret"))))
            var block new_ Plan.Block(String(get_page(), "entry"), new_ Vector[Plan.Instruction](get_page(), instructions))
            blocks.add(block)
            var plan_function: Plan.Function Plan->Function(func.name, new_ Vector[Plan.Argument](get_page(), input_list), returnType, new_ Vector[Plan.Block](get_page(), blocks))
            functions_builder.add(func.name, plan_function)
            functions_list.add(plan_function)
        }
        when e: Implementation.Extern
            throw FeatureNotImplemented(String(ep, "Extern"))
        when i: Implementation.Instruction
            return Void()
        when i: Implementation.Intrinsic
            throw FeatureNotImplemented(String(ep, "Intrinsic"))


    return Void()
}

}