use scaly.containers
use scaly.io

define Planner
(
    program: ref[Program]
    intrinsics_builder: HashSetBuilder[String]
    types_list: List[Plan.Type]
    types_builder: HashMapBuilder[String, Plan.Type]
    functions_list: List[Plan.Function]
    functions_builder: HashMapBuilder[String, Plan.Function]
)
{
    init(program: ref[Program]) (program(program)) (intrinsics_builder(new_ HashSetBuilder[String]())) (types_builder(new_ HashMapBuilder[String, Plan.Type]())) (functions_builder(new_ HashMapBuilder[String, Plan.Function]())) {}

    function plan_program(this: Planner) returns Plan.Module throws PlannerError {
        var r Region()

        let file program.module_.file
        var path Path->get_directory_name(r.get_page(), file)
        if path.get_length() > 0
        {
            try let exists Directory->exists(ep, path)
                else throw

            if exists = false
            {
                try Directory->create(ep, path)
                    else throw
            }
        }

        try plan_module(ep, program.module_)
        else throw

        for module_ in program.module_.modules
        {
            try plan_module(ep, module_)
                else throw
        }

        return Plan->Module(path, program.module_.name, 
            new_ Vector[Plan.Type](rp, types_list),
            new_ HashMap[String, Plan.Type](rp, types_builder),
            new_ Vector[Plan.Function](rp, functions_list),
            new_ HashMap[String, Plan.Function](rp, functions_builder))
    }

function plan_module(this: Planner, module_: ref[Module]) throws PlannerError {
    var r Region()

    try plan_symbols(ep, module_.symbols, module_.members)
        else throw

    return Void()
}

function plan_symbols(this: Planner, symbols: ref[HashMap[String, Nameable]], members: Vector[Member]) throws PlannerError {
    var r Region()

    for member in members
    {
        choose member
            when func: Member.Function
                try plan_function(ep, symbols, func)
                    else throw
            when concept: Member.Concept
                try plan_concept(ep, symbols, concept)
                    else throw
            when op: Member.Operator
                throw FeatureNotImplemented(String(ep, "operator symbol"))
            when p: Member.Package
                throw FeatureNotImplemented(String(ep, "package"))
    }

    return Void()
}

function plan_concept(this: Planner, symbols: ref[HashMap[String, Nameable]], concept: ref[Concept]) throws PlannerError { 
    choose concept.definition
        when ns: Definition.Namespace
            throw FeatureNotImplemented(String(ep, "namespace"))
        when structure: Definition.Structure
            throw FeatureNotImplemented(String(ep, "structure"))
        when i: Definition.Intrinsic
            return plan_intrinsic(ep, concept.name)
        when g: Definition.Global
            throw FeatureNotImplemented(String(ep, "global"))
        when u: Definition.Union
            throw FeatureNotImplemented(String(ep, "union"))
}

function plan_intrinsic(this: Planner, name: String) throws PlannerError {
    var r Region()

    if intrinsics_builder.contains(name)
        throw DuplicateIntrinsic(String(ep, name))
    
    intrinsics_builder.add(name)

    return Void()
}

function resolve_type(this: Planner, type: Type) returns String {
    return String(rp, *type.name.get(0))
}

function plan_tuple(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], names: ref[List[String]], tuple: ref[Tuple], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    for component in tuple.components
    {
        if component.name
            throw TupleComponentNamesNotSupported()
        plan_operation(get_page(), ep, symbols, component.value, result, blocks, instructions)
        ;to_string(get_page(), 1)
    }
    names.add(String(get_page(), "a"))
    names.add(String(get_page(), "b"))
    return instructions
}

function plan_fmul(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], name: String, tuple: ref[Tuple], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    var r Region()
    var names_list: ref[List[String]] *List[String]$()
    plan_tuple(get_page(), ep, symbols, operation, names_list, tuple, result, blocks, instructions)
    
    var names Vector[String](get_page(), names_list)
    if names.length <> 2
        throw InstructionWithInvalidNumberOfArguments(String(ep, name))

    (*instructions).add(Plan->Instruction(&result, String(get_page(), "fmul"), names))
    return instructions
}

function plan_instruction_call(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], name: String, tuple: ref[Tuple], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    if name.equals("fmul")
    {
        return plan_fmul(get_page(), ep, symbols, operation, name, tuple, result, blocks, instructions)
    } else {
        throw UnknownInstruction(String(ep, name))
    }
    return instructions
}

function plan_type(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], type: ref[Type], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    if type.name.length > 1
        throw FeatureNotImplemented(String(ep, "Qualified type name"))
    if type.generics
        throw FeatureNotImplemented(String(ep, "Generic type"))

    choose type.lifetime
        when unspecified: Lifetime.Unspecified {}
        when call: Lifetime.Call
            throw FeatureNotImplemented(String(ep, "Call lifetime"))
        when local: Lifetime.Local
            throw FeatureNotImplemented(String(ep, "Local lifetime"))
        when reference: Lifetime.Reference
            throw FeatureNotImplemented(String(ep, "Reference lifetime"))
        when thrown: Lifetime.Thrown
            throw FeatureNotImplemented(String(ep, "Thrown lifetime"))
    
    let name *type.name.get(0)
    if symbols.contains(name)
    {
        choose *symbols.get(name)
            when modules: Nameable.Package
                throw FeatureNotImplemented(String(ep, "Package reference"))
            when concept: Nameable.Concept
                throw FeatureNotImplemented(String(ep, "Concept reference"))
            when operator_: Nameable.Operator
                throw FeatureNotImplemented(String(ep, "Operator reference"))
            when functions: Nameable.Functions {
                if functions.length > 1
                    throw FeatureNotImplemented(String(ep, "Overloaded functions"))
                let function_ *functions.get(0)
                choose function_.implementation
                    when action: Implementation.Action
                        throw FeatureNotImplemented(String(ep, "Internal Function call"))
                    when extern_: Implementation.Extern
                        throw FeatureNotImplemented(String(ep, "External Function call"))
                    when instruction_: Implementation.Instruction {
                        if operation = null
                            throw InstructionWithoutArguments(String(ep, name))
                        var next_operand (*operation).next()
                        if next_operand = null
                            throw InstructionWithoutArguments(String(ep, name))
                        choose (*next_operand).expression
                            when tuple: Expression.Tuple {
                                return plan_instruction_call(get_page(), ep, symbols, operation, name, tuple, result, blocks, instructions)
                            }
                            else throw InstructionWithoutArguments(String(ep, name))

                    }
                    when intrinsic_: Implementation.Intrinsic
                        throw FeatureNotImplemented(String(ep, "Intrinsic call"))
            }
            when property: Nameable.Property
                throw FeatureNotImplemented(String(ep, "Property reference"))
            when variant: Nameable.Variant
                throw FeatureNotImplemented(String(ep, "Variant reference"))
    } else {
    }

    return instructions
}

function plan_block(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], block: ref[Block], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {

    for statement in block.statements
    {
        choose statement
            when action: Statement.Action
                return plan_action(get_page(), ep, symbols, operation, action, result, blocks, instructions)
            when binding: Statement.Binding
                throw FeatureNotImplemented(String(ep, "Binding statement"))
            when break_: Statement.Break
                throw FeatureNotImplemented(String(ep, "Break statement"))
            when continue_: Statement.Continue
                throw FeatureNotImplemented(String(ep, "Continue statement"))
            when return_: Statement.Return
                throw FeatureNotImplemented(String(ep, "Return statement"))
            when throw_: Statement.Throw
                throw FeatureNotImplemented(String(ep, "Throw statement"))
    }
    return instructions
}

function plan_operand(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], operand: ref[Operand], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    var r Region()
    if operand.member_access
        throw FeatureNotImplemented(String(ep, "member access"))

    choose operand.expression
        when constant: Expression.Constant
            throw FeatureNotImplemented(String(ep, "Constant expression"))
        when type: Expression.Type
            return plan_type(get_page(), ep, symbols, operation, type, result, blocks, instructions)
        when tuple: Expression.Tuple
            throw FeatureNotImplemented(String(ep, "Tuple expression"))
        when matrix: Expression.Matrix
            throw FeatureNotImplemented(String(ep, "Matrix expression"))
        when block: Expression.Block
            return plan_block(get_page(), ep, symbols, operation, block, result, blocks, instructions)
        when if_: Expression.If
            throw FeatureNotImplemented(String(ep, "If expression"))
        when match_: Expression.Match
            throw FeatureNotImplemented(String(ep, "Match expression"))
        when choose_: Expression.Choose
            throw FeatureNotImplemented(String(ep, "Choose expression"))
        when for_: Expression.For
            throw FeatureNotImplemented(String(ep, "For expression"))
        when while_: Expression.While
            throw FeatureNotImplemented(String(ep, "While expression"))
        when try_: Expression.Try
            throw FeatureNotImplemented(String(ep, "Try expression"))
        when sizeof_: Expression.SizeOf
            throw FeatureNotImplemented(String(ep, "SizeOf expression"))
        when is_: Expression.Is
            throw FeatureNotImplemented(String(ep, "Is expression"))
        when new__: Expression.New
            throw FeatureNotImplemented(String(ep, "New expression"))
}

function plan_operation(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: ref[Vector[Operand]], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    var r Region()

    var operand_iterator operation.get_iterator()
    while let operand operand_iterator.next()
    {
        try let new_instructions plan_operand(get_page(), ep, symbols, &operand_iterator, *operand, result, blocks, instructions)
            else throw
    }

    return instructions
}

function plan_action(this: Planner, symbols: ref[HashMap[String, Nameable]], operation: pointer[VectorIterator[Operand]], action: ref[Action], result: String, blocks: ref[List[Plan.Block]], instructions: pointer[List[Plan.Instruction]]) returns pointer[List[Plan.Instruction]] throws PlannerError {
    var r Region()
    if action.target.length > 0
        throw FeatureNotImplemented(String(ep, "set"))

    try let new_instructions plan_operation(get_page(), ep, symbols, action.source, result, blocks, instructions)
        else throw

    return instructions
}

function plan_function(this: Planner, symbols: ref[HashMap[String, Nameable]], func: ref[Function]) throws PlannerError {
    var r Region()

    if functions_builder.contains(func.name)
        throw DuplicateFunction(String(ep, func.name))

    var returnType resolve_type(get_page(), *func.returns_)
    var input_list: ref[List[Plan.Argument]] *new_ List[Plan.Argument]$()
    for item in func.input
    {
        input_list.add(Plan->Argument(*item.name, resolve_type(get_page(), *item.type)))
    }

    var blocks: ref[List[Plan.Block]] *new_ List[Plan.Block]$()
    var instructions: ref[List[Plan.Instruction]] *new_ List[Plan.Instruction]$()
    choose func.implementation
        when action: Implementation.Action
        {
            var page get_page()
            var ret new_ String^page(get_page(), "_ret")
            try let new_instructions plan_action(get_page(), ep, symbols, null, action, *ret, blocks, &instructions)
                else throw
            set instructions: *new_instructions
            if func.returns_
            {
                var args_list: ref[List[String]] *List[String]$()
                var retval (*(instructions.get_head())).result
                args_list.add(*retval)
                var names Vector[String](get_page(), args_list)
                instructions.add(Plan->Instruction(ret, String(get_page(), "ret"), Vector[String](get_page(), args_list)))
            } else {
                instructions.add(Plan->Instruction(null, String(get_page(), "ret"), Vector[String]()))
            }

            var block new_ Plan.Block(String(get_page(), "entry"), new_ Vector[Plan.Instruction](get_page(), instructions))
            blocks.add(block)
        }
        when e: Implementation.Extern {}
        when i: Implementation.Instruction
            return Void()
        when i: Implementation.Intrinsic
            return Void()

    var plan_function: Plan.Function Plan->Function(func.name, new_ Vector[Plan.Argument](get_page(), input_list), returnType, new_ Vector[Plan.Block](get_page(), blocks))
    functions_builder.add(func.name, plan_function)
    functions_list.add(plan_function)
    return Void()
}

}