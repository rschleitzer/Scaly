use scaly.io

define Position (
    line: size_t
    column: size_t
)

function calculate_position_from_string(text: String, offset: size_t) returns Position$ {
    let iterator text.get_iterator()
    var line: size_t 1
    var column: size_t 1
    var counter: size_t 0
    for character in text
    {
        set counter: counter + 1
        if offset = counter
            return Position(line, column)
        if character = '\n'
        {
            set line: line + 1
            set column: 1
        } else {
            column++
        }
    }
    return Position(0, 0)
}

function build_hint_lines_from_string(text: String, start_offset: size_t, end_offset: size_t, start_position: Position, end_position: Position) returns String {
    var r Region()
    var current_line: size_t 1
    var current_column: size_t 1
    var counter: size_t 0
    let start_line start_position.line
    let end_line end_position.line
    let start_column start_position.column
    let end_column end_position.column
    var line_builder StringBuilder$()
    var indicator_builder StringBuilder$()
    var output_builder StringBuilder$()

    for character in text
    {
        counter++
        if character = '\n'
        {
            if current_line >= start_line && current_line <= end_line
            {
                (*line_builder).append('\n')
                (*output_builder).append((*line_builder).to_string(r.get_page()))
                (*indicator_builder).append('\n')
                (*output_builder).append((*indicator_builder).to_string(r.get_page()))
            }
            current_line++
            set current_column: 1
            if current_line > end_line
            {
                return (*output_builder).to_string(rp)
            } else {
                set line_builder: StringBuilder$()
                set indicator_builder: StringBuilder$()
            }

        } else {
            if current_line >= start_line && current_line <= end_line
            {
                (*line_builder).append(character)
                if (counter >= start_offset && counter < end_offset)
                {
                    (*indicator_builder).append('^')
                } else {
                    (*indicator_builder).append(' ')
                }
            }
            set current_column: current_column + 1
        }
    }

    (*line_builder).append('\n')
    (*output_builder).append((*line_builder).to_string(r.get_page()))
    (*indicator_builder).append('\n')
    (*output_builder).append((*indicator_builder).to_string(r.get_page()))
    return (*output_builder).to_string(rp)
}

function build_hint_lines(file: String, start_offset: size_t, end_offset: size_t, start_position: Position, end_position: Position) returns String throws FileError {
    var r Region()
    try let text File->read_to_string(r.get_page(), r.get_page(), file) :else throw
    return build_hint_lines_from_string(rp, text, start_offset, end_offset, start_position, end_position)
}

function calculate_position(file: String, offset: size_t) returns Position throws FileError {
    var r Region()
    try let text File->read_to_string(r.get_page(), r.get_page(), file) :else throw
    return calculate_position_from_string(text, offset)
}

function number_to_string(number: size_t) returns String {
    var r Region()
    var str (char*)(*r.get_page()).allocate(32, 1)
    snprintf(str, 22, "%zd", number)
    return String(rp, str)
}

function append_error_message_header(builder: ref[StringBuilder], file: String, offset: size_t) {
    var r Region()
    builder.append(file)
    builder.append(':')
    choose calculate_position(r.get_page(), r.get_page(), file, offset)
        when position_start: Success.Ok
        {
            builder.append(number_to_string(r.get_page(), position_start.line))
            builder.append(':')
            builder.append(number_to_string(r.get_page(), position_start.column))
            builder.append(": error: ")
        }
        else {}
}

function append_hint_lines(builder: ref[StringBuilder], file: String, start: size_t, end: size_t) {
    var r Region()
    builder.append('\n')
    choose calculate_position(r.get_page(), r.get_page(), file, end)
        when position_end: Success.Ok
        {
            choose calculate_position(r.get_page(), r.get_page(), file, start)
                when position_start: Success.Ok
                {
                    choose build_hint_lines(r.get_page(), r.get_page(), file, start, end, position_start, position_end)
                        when hint_lines: Success.Ok
                            builder.append(hint_lines)
                        else {}
                }
                else {}
        }
        else {}
}

define IoModelError union(File: FileError)
{
    function to_string(this: IoModelError) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        choose *this
            when file: IoModelError.File
                message_builder.append(file.to_string(rp))
            else {}
        return message_builder.to_string(rp)     
    }
}

define ParserModelError(file: String, error: ParserError)
{
    function to_string(this: ParserModelError) returns String {
        var r Region()
        choose error
            when d: ParserError.Different
                return String(rp, "An other syntax was expected here.")     
            when i: ParserError.Invalid
                return build_error_message(rp,  i)
    }

    function build_error_message(this: ParserModelError, invalid_syntax: InvalidSyntax) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, invalid_syntax.start)
        message_builder.append("Expected ")
        message_builder.append(invalid_syntax.expected)
        message_builder.append('.')
        append_hint_lines(message_builder, file, invalid_syntax.start, invalid_syntax.end)

        return message_builder.to_string(rp)
    }
}

define NotImplemented(file: String, name: String,span: Span)
{
    function to_string(this: NotImplemented) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("The ")
        message_builder.append(name)
        message_builder.append(" syntax cannot be processed by the modeler yet.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define DuplicateName(file: String, span: Span)
{
    function to_string(this: DuplicateName) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("This declaration already exists.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define NonFunctionSymbolExists(file: String, span: Span)
{
    function to_string(this: NonFunctionSymbolExists) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("This declaration already exists, but not as a function.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define FunctionSymbolExists(file: String, span: Span)
{
    function to_string(this: FunctionSymbolExists) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("This declaration already exists, but as a function.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define DeInitializerExists(file: String, span: Span)
{
    function to_string(this: DeInitializerExists) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("A deinitializer has already been defined.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define InvalidConstant(file: String, span: Span)
{
    function to_string(this: InvalidConstant) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("This is an invalid constant.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define InvalidComponentName(file: String, span: Span)
{
    function to_string(this: InvalidComponentName) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("The component does not have an identifier as name.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define ModuleRootMustBeConcept(file: String, span: Span)
{
    function to_string(this: ModuleRootMustBeConcept) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        append_error_message_header(message_builder, file, span.start)
        message_builder.append("The root definition of a module must be a concept.")
        append_hint_lines(message_builder, file, span.start, span.end)

        return message_builder.to_string(rp)
    }
}

define ModelBuilderError union
(
    NotImplemented: NotImplemented
    DuplicateName: DuplicateName
    NonFunctionSymbolExists: NonFunctionSymbolExists
    FunctionSymbolExists: FunctionSymbolExists
    DeInitializerExists: DeInitializerExists
    InvalidConstant: InvalidConstant
    InvalidComponentName: InvalidComponentName
    ModuleRootMustBeConcept: ModuleRootMustBeConcept
)
{
    function to_string(this: ModuleRootMustBeConcept) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        choose *this
            when ni: ModelBuilderError.NotImplemented
                message_builder.append(ni.to_string(rp))
            when dn: ModelBuilderError.DuplicateName
                message_builder.append(dn.to_string(rp))
            when nfse: ModelBuilderError.NonFunctionSymbolExists
                message_builder.append(nfse.to_string(rp))
            when fse: ModelBuilderError.FunctionSymbolExists
                message_builder.append(fse.to_string(rp))
            when di: ModelBuilderError.DeInitializerExists
                message_builder.append(di.to_string(rp))
            when ic: ModelBuilderError.InvalidConstant
                message_builder.append(ic.to_string(rp))
            when icn: ModelBuilderError.InvalidComponentName
                message_builder.append(icn.to_string(rp))
            when mrmbc: ModelBuilderError.ModuleRootMustBeConcept
                message_builder.append(mrmbc.to_string(rp))

        return message_builder.to_string(rp)
    }
}

define ModelError union
(
    Io: IoModelError
    Parser: ParserModelError
    Builder: ModelBuilderError
)
{
    function to_string(this: ModelError) returns String {
        var r Region()
        var message_builder: ref[StringBuilder] *StringBuilder$()
        choose *this
            when io: ModelError.Io
                message_builder.append(io.to_string(rp))
            when p: ModelError.Parser
                message_builder.append(p.to_string(rp))
            when b: ModelError.Builder
                message_builder.append(b.to_string(rp))

        return message_builder.to_string(rp)
    }
}

