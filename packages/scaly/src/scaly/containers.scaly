define containers {
    module Node
    module ListIterator
    module List
    module Vector
    module Array
    module BuilderListIterator
    module BuilderList
    module hashing
    module HashSetBuilder
    module HashSet
    module HashMapBuilder
    module HashMap
    module MultiMapBuilder
    module MultiMap
    module String
    module StringIterator
    module StringBuilder

    function test_vector() {
        var r Region()
        var vector Vector[int]$(r.get_page(), 2)
        set *(*vector).get(0): 1
        (*vector).put(1, 2)
        if *((*vector).get(0)) <> 1
            exit(-1)
        if *(*vector)[1] <> 2
            exit(-2)
    }

    function test_array()
    {
        var r Region()
        var array Array[int]$()

        ; A quarter gigabyte worth of ints
        let huge_number: int 1024 * 1024 * 64
        {
            var i: int 1
            while i <= huge_number
            {
                (*array).add(i)
                set i: i + 1
            }
        }
        
        let buffer: pointer[int] (*array).get_buffer()
        {
            var i: int 1
            while i <= huge_number
            {
                if *(buffer + i - 1) <> i
                    exit(-6)
                set i: i + 1
            }
        }
    }

    function test_string() {
        var r Region()
        var string String(r.get_page(), "Hello world!")
        let length string.get_length()
        if length <> 12
            exit(-7)
        var long_string String(r.get_page(), "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")
        if long_string.get_length() <> 130
            exit(-8)
        var c_string long_string.to_c_string(r.get_page())
        var string_c String(r.get_page(), c_string)

        var semi String(r.get_page(), ";")
        var dot String(r.get_page(), ".")
        if semi.equals(dot)
            exit(-9)
        var semi2 String(r.get_page(), ";")
        if semi.equals(semi2) <> true
            exit(-10)
    }

    function test_string_builder() {
        var r Region()
        var string_builder StringBuilder$()
        let length (*string_builder).get_length()
        if length <> 0
            exit(-11)
        (*string_builder).append('a')
        (*string_builder).append('b')
        (*string_builder).append('c')
        if (*string_builder).to_string(r.get_page()).equals("abc") = false
            exit(-12)
        if (*string_builder).get_length() <> 3
            exit(-13)

        var string_builder2 StringBuilder$('d')
        (*string_builder2).append('e')
        (*string_builder2).append('f')
        (*string_builder2).append('g')
        if (*string_builder2).to_string(r.get_page()).equals("defg") = false
            exit(-14)
        if (*string_builder2).get_length() <> 4
            exit(-15)
        
        var string_builder3 StringBuilder$("hijk")    
        (*string_builder3).append("lmno")
        if (*string_builder3).to_string(r.get_page()).equals("hijklmno") = false
            exit(-16)
    }

    function test_list() {
        var r Region()
        var rp r.get_page()
        var list List[int]$()

        let huge_number: int 1024 * 1024 * 62
        {
            var i: int 1
            while i <= huge_number
            {
                (*list).add(i)
                set i: i + 1
            }
        }

        var iterator (*list).get_iterator()
        {
            var i: int huge_number
            while i >= 1
            {
                let p iterator.next()
                if p = null
                    exit(-16)
                if *p <> i
                    exit(-17)
                set i: i - 1
            }
        }
    }

    function test_hash_set() {
        var r Region()
        var array Array[String]$()
        (*array).add(String(r.get_page(), "using"))
        (*array).add(String(r.get_page(), "namespace"))
        (*array).add(String(r.get_page(), "typedef"))
        let vector Vector[String](r.get_page(), *array)
        var keywords_builder HashSetBuilder[String]$(vector)
        if (*keywords_builder).contains(String(r.get_page(), "using")) = false
            exit (-18)
        if (*keywords_builder).contains(String(r.get_page(), "namespace")) = false
            exit (-18)
        if (*keywords_builder).contains(String(r.get_page(), "typedef")) = false
            exit (-18)
        if (*keywords_builder).contains(String(r.get_page(), "nix"))
            exit (-18)
        var keywords HashSet[String]$(r.get_page(), *keywords_builder)
        if (*keywords).contains(String(r.get_page(), "using")) = false
            exit (-19)
        if (*keywords).contains(String(r.get_page(), "namespace")) = false
            exit (-19)
        if (*keywords).contains(String(r.get_page(), "typedef")) = false
            exit (-19)
        if (*keywords).contains(String(r.get_page(), "nix"))
            exit (-19)
    }

    function test_hash_map() {
        {
            var r Region()
            var p r.get_page()
            var array Array[KeyValuePair[String, int]]$()
            (*array).add(KeyValuePair[String, int](String(p, "using"), 1))
            (*array).add(KeyValuePair[String, int](String(p, "namespace"), 2))
            (*array).add(KeyValuePair[String, int](String(p, "typedef"), 3))
            let vector Vector[KeyValuePair[String, int]](p, *array)
            var keywords_builder HashMapBuilder[String, int]$(p, vector)
            if (*keywords_builder).contains(String(p, "using")) = false
                exit (-18)
            if (*keywords_builder).contains(String(p, "namespace")) = false
                exit (-19)
            if (*keywords_builder).contains(String(p, "typedef")) = false
                exit (-20)
            if (*keywords_builder).contains(String(p, "nix"))
                exit (-21)
            if *(*keywords_builder)[String(p, "using")] <> 1
                exit (-22)
            if *(*keywords_builder)[String(p, "namespace")] <> 2
                exit (-23)
            if *(*keywords_builder)[String(p, "typedef")] <> 3
                exit (-24)
            if (*keywords_builder)[String(p, "nix")] <> nullptr
                exit (-25)
            var keywords HashMap[String, int]$(p, *keywords_builder)
            if (*keywords).contains(String(p, "using")) = false
                exit (-18)
            if (*keywords).contains(String(p, "namespace")) = false
                exit (-19)
            if (*keywords).contains(String(p, "typedef")) = false
                exit (-20)
            if (*keywords).contains(String(p, "nix"))
                exit (-21)
            if *(*keywords)[String(p, "using")] <> 1
                exit (-22)
            if *(*keywords)[String(p, "namespace")] <> 2
                exit (-23)
            if *(*keywords)[String(p, "typedef")] <> 3
                exit (-24)
            if (*keywords)[String(p, "nix")] <> null
                exit (-25)
        }
        {
            var r Region()
            var p r.get_page()
            var map HashMapBuilder[String, size_t]$()
            var hash_set HashSetBuilder[String]$()
            {
                var i: char 'A'
                while i <= 'Z'
                {
                    var j: char 'a'
                    while j <= 'z'
                    {
                        var k: char '0'
                        while k <= '9'
                        {
                            var l: char '!'
                            while l <= '/'
                            {
                                var r_2 Region()
                                var p_2 r.get_page()
                                var sb StringBuilder^p_2(i)
                                (*sb).append(j)
                                (*sb).append(k)
                                (*sb).append(l)
                                (*map).add((*sb).to_string(p), (size_t)i * j * k * l)
                                (*hash_set).add((*sb).to_string(p))

                                set l: l + 1
                            }
                            set k: k + 1
                        }
                        set j: j + 1
                    }
                    set i: i + 1
                }
            }

            {
                var i: char 'A'
                while i <= 'Z'
                {
                    var j: char 'a'
                    while j <= 'z'
                    {
                        var k: char '0'
                        while k <= '9'
                        {
                            var l: char '!'
                            while l <= '/'
                            {
                                var r_2 Region()
                                var p_2 r.get_page()
                                var sb StringBuilder^p_2(i)
                                (*sb).append(j)
                                (*sb).append(k)
                                (*sb).append(l)
                                let theString (*sb).to_string(p_2)
                                if (*hash_set).contains(theString) = false
                                    exit(-26)
                                if (*map).contains(theString) = false
                                    exit(-27)
                                if *(*map)[theString] <> (size_t)i * j * k * l
                                    exit(-28)

                                set l: l + 1
                            }
                            set k: k + 1
                        }
                        set j: j + 1
                    }
                    set i: i + 1
                }
            }
        }
    }

    function test_multi_map() {
        {
            var r Region()
            var p r.get_page()
            var map_builder MultiMapBuilder[String, size_t]$()
            {
                var i: char 'A'
                while i <= 'Z'
                {
                    var j: char 'a'
                    while j <= 'z'
                    {
                        var k: char '0'
                        while k <= '9'
                        {
                            var l: char '!'
                            while l <= '/'
                            {
                                var r_2 Region()
                                var p_2 r.get_page()
                                var sb StringBuilder^p_2(i)
                                (*sb).append(j)
                                (*sb).append(k)
                                (*sb).append(l)
                                (*map_builder).add((*sb).to_string(p), (size_t)i * j * k * l)
                                (*map_builder).add((*sb).to_string(p), (size_t)i * j * k * l + 1)
                                (*map_builder).add((*sb).to_string(p), (size_t)i * j * k * l + 2)

                                set l: l + 1
                            }
                            set k: k + 1
                        }
                        set j: j + 1
                    }
                    set i: i + 1
                }
            }
            var map MultiMap[String, size_t]$(p, *map_builder)
            {
                var i: char 'A'
                while i <= 'Z'
                {
                    var j: char 'a'
                    while j <= 'z'
                    {
                        var k: char '0'
                        while k <= '9'
                        {
                            var l: char '!'
                            while l <= '/'
                            {
                                var r_2 Region()
                                var p_2 r.get_page()
                                var sb StringBuilder^p_2(i)
                                (*sb).append(j)
                                (*sb).append(k)
                                (*sb).append(l)
                                let theString (*sb).to_string(p_2)
                                if (*map_builder).contains(theString) = false
                                    exit(-27)
                                if (*map).contains(theString) = false
                                    exit(-27)
                                if *(*(*map_builder)[theString]).get(0) <> (size_t)i * j * k * l
                                    exit(-28)
                                if *(*(*map)[theString]).get(0) <> (size_t)i * j * k * l
                                    exit(-28)
                                if *(*(*map_builder)[theString]).get(1) <> (size_t)i * j * k * l + 1
                                    exit(-28)
                                if *(*(*map)[theString]).get(1) <> (size_t)i * j * k * l + 1
                                    exit(-28)
                                if *(*(*map_builder)[theString]).get(2) <> (size_t)i * j * k * l + 2
                                    exit(-28)
                                if *(*(*map)[theString]).get(2) <> (size_t)i * j * k * l + 2
                                    exit(-28)

                                set l: l + 1
                            }
                            set k: k + 1
                        }
                        set j: j + 1
                    }
                    set i: i + 1
                }
            }
        }
    }

    function test ()
    {
        test_vector()
        test_array()
        test_string()
        test_string_builder()
        test_list()
        test_hash_set()
        test_hash_map()
        test_multi_map()
    }
}