package scaly

use scaly.json

define scals
{
    module Lsp
}

function process_message(message: String) {
    var r Region()
    let requestMessage scals->de_serialize_requestMessage(r.get_page(), message)
}

function get_message(fd: int) returns pointer[String] {
    var r Region()
    let buffer_size: size_t 0x800
    var buffer: pointer[char] (char*)(*r.get_page()).allocate(buffer_size, 1)
    var bytes_read read(fd, buffer, buffer_size)
    if bytes_read = -1
        exit(-1)
    if bytes_read = 0
        return null
    var end buffer + bytes_read
    write(2, buffer, bytes_read)

    var index buffer
    var length: size_t 0
    while index < end
    {
        if *index >= '0' && *index <= '9': break
        set index: index + 1
    }

    let last index
    while index < end
    {
        if *index < '0' || *index > '9': break
        set index: index + 1
    }

    var current index - 1
    var multiplier 1
    while current >= last
    {
        set length: length + (*current - '0') * multiplier
        set multiplier: multiplier * 10
        set current: current - 1
    }

    while index < end
    {
        if *index <> '\r' && *index > '\n': break
        set index: index + 1
    }

    if length = 0
        return null    

    var builder: ref[StringBuilder] *StringBuilder$(length)
    while length > 0
    {
        let remainder end - index
        builder.append(index, remainder)

        set length: length - remainder
        if length < 0
            exit(-1)
        if length = 0
            break
        
        var bytes_to_read length
        if bytes_to_read > buffer_size
            set bytes_to_read: buffer_size

        set bytes_read: read(fd, buffer, bytes_to_read)
        if bytes_read = -1
            exit(-2)

        if bytes_read = 0
            return null
        set index: buffer
        set end: buffer + bytes_read
        write(2, index, bytes_read)
    }

    return String#(rp, builder.to_string(r.get_page()))
}

var r Region()

var fd 0
if argc = 2
{
    let arg *(argv + 1)
    var argument String(r.get_page(), arg)
    set fd: open(argument.to_c_string(r.get_page()), 0)
}

while true
{
    var r_1 Region()
    let message get_message(r_1.get_page(), fd)
    if message = null
    {
        break
    }

    process_message(*message)
}
