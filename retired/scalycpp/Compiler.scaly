class Compiler {
    static function compileFiles(options: Options) {
        let files: string[] = options.files
        mutable sources: string[]$ = new string[]()
        for file: string in files {
            let source: string@sources = File.readToString(file)
                catch FileError.noSuchFileOrDirectory() {
                    mutable msg: VarString$ = new VarString("Can't read file: ")
                    msg.append(file)
                    msg.append("\n")
                    let message: string$ = new string(msg)
                    print(message) catch _ return
                    return
                }
                
            sources.push(source)
        }

        mutable modules: Module[]$ = new Module[]()
        let index: number = 0
        for source: string in sources {
            let moduleName: string@modules = Path.getFileNameWithoutExtension(files[index])
            let module: Module@modules = parseUnit(moduleName, source)
                catch CompilerError.parser(line: number, column: number) {
                    mutable msg: VarString$ = new VarString("Syntax error in ")
                    msg.append(files[index])
                    msg.append(" at ")
                    let lineString: string$ = Number.toString(line)
                    msg.append(lineString)
                    msg.append(", ")
                    let columnString: string$ = Number.toString(column)
                    msg.append(columnString)
                    msg.append("\n")
                    let message: string$ = new string(msg)
                    print(message) catch _ return
                    return
                }

            modules.push(module)
            index++
        }

        let program: Program$ = new Program(options.outputName, new Module[](modules))
        for item: Module in modules
            item.parent = program

        mutable headerVisitor: HeaderVisitor$ = new HeaderVisitor(options.directory)        
        program.accept(headerVisitor)

        mutable sourceVisitor: SourceVisitor$ = new SourceVisitor(options.directory)        
        program.accept(sourceVisitor)

        mutable modelVisitor: ModelVisitor$ = new ModelVisitor()
        program.accept(modelVisitor)
        
        let model: Model = modelVisitor.model
        let msg: VarString$ = new VarString(model.name)
        msg.append("\n")
        let message: string$ = new string (msg)
        print(message) catch _ return
    }

    static function parseUnit(moduleName: string, text: string): Module throws CompilerError {
        mutable parser: Parser$ = new Parser(moduleName, text)

        let module: Module = parser.parseModule()
            catch ParserError.syntax(line: number, column: number) {
                throw parser(line, column)
            }

        module
    }
}
