class Position
class Token
class EofToken
class InvalidToken
class Identifier
class Literal
class StringLiteral
class CharacterLiteral
class NumericLiteral
class Punctuation
class Operator
class PrefixOperator
class BinaryOperator
class PostfixOperator

class Lexer {

    mutable token: Token, whitespaceSkipped: bool
    let text: string
    mutable position: number
    let end: number
    mutable previousLine: number, previousColumn: number
    mutable line: number
    mutable column: number
    
    constructor(theText: string) {
        token = null
        whitespaceSkipped = true
        text = theText
        end = text.getLength()
        position = 0
        previousLine = 1
        previousColumn = 0
        line = 1
        column = 0
        advance()
    }

    function advance() {
        skipWhitespace()
        previousLine = line
        previousColumn = column

        if position == end {
            token = new EofToken()
            return
        }
        
        let c: char = text.charAt(position)
        
        if ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) {
            token = scanIdentifier()
            return
        }
        
        if (c >= '0') && (c <= '9') {
            token = scanNumericLiteral()
            return
        }

        switch c {
            case '\"':
                token = scanStringLiteral()

            case '\'':
                token = scanCharacterLiteral()

            case '_', '(', ')', '{', '}', '[', ']', ',', ':', ';', '@', '#', '^', '`', '$': {
                token = new Punctuation(new string(c))
                position++ column++
            }

            case '+', '*', '/', '%', '|', '~':
                token = scanOperator(false)
            
            case '<', '>': {
                position++ column++
                if position == end {
                    token = new InvalidToken()
                }
                else {
                    switch text.charAt(position) {
                        case '=', '+', '-', '*', '/', '%', '&', '|', '!', '^', '~', '.': {
                            position-- column--
                            token = scanOperator(true)
                        }
                        default:
                            token = new Punctuation(new string(c))
                    }
                }
            }

            case '.': {
                position++ column++
                if position == end {
                    token = new InvalidToken()
                }
                else {
                    if text.charAt(position) == '.' {
                        position-- column--
                        token = scanOperator(true)
                    }
                    else {
                        token = new Punctuation(new string('.'))
                    }
                }
            }
            
            case '-': {
                position++ column++
                if position == end {
                    token = new InvalidToken()
                }
                else {
                    if text.charAt(position) != '>' {
                        position-- column--
                        token = scanOperator(true)
                    }
                    else {
                        token = new Punctuation(new string("->"))
                        position++ column++
                    }
                }
            }

            case '!', '?', '&': {
                position++ column++
                if position == end {
                    token = new PostfixOperator(new string(c))
                }
                else {
                    switch text.charAt(position) {
                        case '=', '+', '-', '*', '/', '%', '&', '|', '!', '^', '~', '.': {
                            position-- column--
                            token = scanOperator(true)
                        }

                        default: {
                            if whitespaceSkipped || ((token != null) && (token is Punctuation)) {
                                position-- column--
                                token = scanOperator(true)
                            }
                            else {
                                token = new Punctuation(new string(c))
                            }
                        }
                    } 
                }
            }

            case '=': {
                position++ column++
                if position == end {
                    token = new InvalidToken()
                }
                else {
                    switch text.charAt(position) {
                        case '/', '=', '+', '!', '*', '%', '&', '|', '^', '~': {
                            position-- column--
                            token = scanOperator(true)
                        }
                        default:
                            token = new Punctuation(new string("="))
                    }
                }
            }
 
            default:
                token = new InvalidToken()
        }
    }

    function scanIdentifier(): Identifier {
        mutable firstChar: char = text.charAt(position)
        mutable name: VarString$ = new VarString(firstChar)

        do {
            position++ column++
            
            if position == end
                return(new Identifier(new string(name)))
            
            mutable c: char = text.charAt(position)
            if  ((c >= 'a') && (c <= 'z')) || 
                ((c >= 'A') && (c <= 'Z')) || 
                ((c >= '0') && (c <= '9')) || 
                 (c == '_')
                name.append(c)
            else
                return(new Identifier(new string(name)))
        }            
        while true
    }

    function scanOperator(includeDots: bool): Operator {
        mutable whitespaceSkippedBefore: bool = whitespaceSkipped

        if !whitespaceSkippedBefore {
            if token is Punctuation {
                let sign: string = (token as Punctuation).sign
                if sign.equals("(") || sign.equals("[") || sign.equals("{") || sign.equals(",") || sign.equals(";") || sign.equals(":")
                    whitespaceSkippedBefore = true
                else
                    whitespaceSkippedBefore = false
            }
        }
        
        mutable firstChar: char = text.charAt(position)
        mutable operation: VarString$ = new VarString(firstChar)

        do {
            position++ column++
            if position == end {
                if whitespaceSkippedBefore
                    return(new BinaryOperator(new string(operation)))
                else
                    return(new PostfixOperator(new string(operation)))
            }

            if includeDots && (text.charAt(position) == '.') {
                operation.append(text.charAt(position))
                continue
            }
            
            switch text.charAt(position) {
                case '/', '=', '-', '+', '!', '*', '%', '<', '&', '|', '^', '~':
                    operation.append(text.charAt(position))

                default: {
                    let lastPosition: number = position
                    let lastLine: number = line
                    let lastColumn: number = column
                    skipWhitespace()
                    position = lastPosition
                    line = lastLine
                    column = lastColumn
                    mutable whitespaceSkippedAfter: bool = whitespaceSkipped

                    if !whitespaceSkippedAfter {
                        switch text.charAt(position) {
                            case ')', ']', '}', ',', ';', ':', '.':
                                whitespaceSkippedAfter = true
                            default:
                                whitespaceSkippedAfter = false
                        }
                    }

                    if (whitespaceSkippedBefore &&  whitespaceSkippedAfter) || 
                      (!whitespaceSkippedBefore && !whitespaceSkippedAfter)
                        return(new BinaryOperator(new string(operation)))
                        
                    if (!whitespaceSkippedBefore && whitespaceSkippedAfter)
                        return(new PostfixOperator(new string(operation)))
                        
                    if (whitespaceSkippedBefore && !whitespaceSkippedAfter)
                        return(new PrefixOperator(new string(operation)))
                }
            }
        } while true
    }

    function scanStringLiteral(): Token {
        mutable value: VarString$ = new VarString("")

        do {
            position++ column++
            if position == end
                return(new InvalidToken())

            switch text.charAt(position) {
                case '\"': {
                    position++ column++
                    return(new StringLiteral(new string(value)))
                }
                case '\\': {
                    position++ column++
                    switch text.charAt(position) {
                        case '\"', '\\', '\'': {
                            value.append('\\')
                            value.append(text.charAt(position))
                        }
                        case 'n': value.append("\\n")
                        case 'r': value.append("\\r")
                        case 't': value.append("\\t")
                        case '0': value.append("\\0")
                        default: return(new InvalidToken())
                    }
                }
                default:
                    value.append(text.charAt(position))
            }
        } while true
    }

    function scanCharacterLiteral(): Token {
        mutable value: VarString$ = new VarString("")
        do {
            position++ column++
            if position == end
                return(new InvalidToken())

            switch text.charAt(position) {
                case '\'': {
                    position++ column++
                    return(new CharacterLiteral(new string(value)))
                }
                case '\\': {
                    position++ column++
                    switch text.charAt(position) {
                        case '\"', '\\', '\'': value.append(text.charAt(position))
                        case 'n': value.append('\n')
                        case 'r': value.append('\r')
                        case 't': value.append('\t')
                        case '0': value.append('\0')
                        default: return(new InvalidToken())
                    }
                }
                default: {
                    value.append(text.charAt(position))
                }
            }
        }
        while true
    }

    function scanNumericLiteral(): NumericLiteral {
        mutable firstChar: char = text.charAt(position)
        mutable value: VarString$ = new VarString(firstChar)

        do {
            position++ column++
            
            if position == end
                return(new NumericLiteral(new string(value)))
            
            let c: char = text.charAt(position)
            if (c >= '0') && (c <= '9')
                value.append(text.charAt(position))
            else
                return(new NumericLiteral(new string(value)))
        } while true
    }

    function skipWhitespace(): bool {
        whitespaceSkipped = false
        do {
            if position == end
                return(true)

            switch text.charAt(position) {
                case ' ': {
                    whitespaceSkipped = true
                    position++ column++
                    continue
                }
                case '\t': {
                    whitespaceSkipped = true
                    position++ column += 4
                    continue
                }
                case '\r': {
                    whitespaceSkipped = true
                    position++
                    continue
                }
                case '\n': {
                    whitespaceSkipped = true
                    position++ column = 1 line++
                    continue
                }
                case '/': {
                    position++ column++

                    if position == end
                        return(whitespaceSkipped)
                        
                    if text.charAt(position) == '/' { 
                        whitespaceSkipped = true
                        handleSingleLineComment()
                    }
                    else { 
                        if text.charAt(position) == '*' { 
                            whitespaceSkipped = true
                            handleMultiLineComment()
                        }
                        else
                            return(whitespaceSkipped)
                    }
                }
                default:
                    return(whitespaceSkipped)
            }
        } 
        while true
    }
    
    function handleSingleLineComment() {
        do {
            if position == end
                return
                
            switch text.charAt(position) {
                case '\t': {
                    whitespaceSkipped = true
                    position++ column += 4
                    continue
                }
                case '\r': {
                    whitespaceSkipped = true
                    position++
                    continue
                }
                case '\n': {
                    whitespaceSkipped = true
                    position++ column = 1 line++
                    return
                }
                default: {
                    position++ column++
                    continue
                }
            }
        }
        while true
    }

    function handleMultiLineComment() {
        do {
            if position == end
                return
                
            switch text.charAt(position) {
                case '/': {
                    position++ column++
                    if position == end
                        return
                    else {
                        if text.charAt(position) == '*'
                            handleMultiLineComment()
                        else
                            return
                    }
                }
                case '*': {
                    position++ column++

                    if position == end
                        return
                    else {
                        if text.charAt(position) == '/' { 
                            position++ column++
                            return
                        }
                    }
                }
                case '\t': {
                    whitespaceSkipped = true
                    position++ column += 4
                    continue
                }
                case '\r': {
                    whitespaceSkipped = true
                    position++
                    continue
                }
                case '\n': {
                    whitespaceSkipped = true
                    position++ column = 1 line++
                    continue
                }
                default: {
                    position++ column++
                    continue
                }
            }
        }
        while true
    }

    function parseKeyword(fixedString: string): bool {
        if !(token is Identifier)
            return(false)

        let identifier: Identifier = token as Identifier
        
        identifier.name.equals(fixedString)
    }

    function parseIdentifier(): string {
        if !(token is Identifier)
            return(null)

        let identifier: Identifier = token as Identifier

        return(new string(identifier.name))
    }

    function parsePunctuation(fixedString: string): bool {
        if !(token is Punctuation)
            return(false)

        let punctuation: Punctuation = token as Punctuation

        punctuation.sign.equals(fixedString)
    }

    function parseOperator(): string {
        if !(token is Operator)
            return(null)

        let op: Operator = token as Operator

        return(new string(op.operation))
    }

    function parseLiteral(): Literal {
        if !(token is Literal)
            return(null)

        if token is StringLiteral {
            let stringLiteral: StringLiteral = token as StringLiteral
            return(new StringLiteral(new string(stringLiteral.value)))
        }

        if token is CharacterLiteral {
            let characterLiteral: CharacterLiteral = token as CharacterLiteral
            return(new CharacterLiteral(new string(characterLiteral.value)))
        }

        if token is NumericLiteral {
            let numericLiteral: NumericLiteral = token as NumericLiteral
            return(new NumericLiteral(new string(numericLiteral.value)))
        }

        null
    }


    function parsePrefixOperator(): string {
        if !(token is PrefixOperator)
            return(null)

        let op: Operator = token as Operator
        return(new string(op.operation))
    }

    function parseBinaryOperator(): string {
        if !(token is BinaryOperator) {
            if (token is Punctuation) && (((token as Punctuation).sign.equals("<")) || ((token as Punctuation).sign.equals(">"))) {
                let op: Operator = token as Operator
                return(new string(op.operation))
            }

            return(null)
        }

        let op: Operator = token as Operator

        return(new string(op.operation))
    }


    function parsePostfixOperator(): string {
        if !(token is PostfixOperator)
            return(null)

        let op: Operator = token as Operator

        return(new string(op.operation))
    }

    function isAtEnd(): bool {
        position == end
    }

    function getPosition(): Position {
        return(new Position(line, column))
    }

    function getPreviousPosition(): Position {
        return(new Position(previousLine, previousColumn))
    }
}

class Position {
    constructor(line: number, column: number) {
        this.line = line
        this.column = column
    }

    constructor(position: Position) {
        this.line = position.line
        this.column = position.column
    }

    let line: number
    let column: number
}

class Token {
}

class EofToken extends Token {
}

class InvalidToken extends Token {
}

class Identifier extends Token {
    constructor(name: string) {
        this.name = name
    }
    let name: string
}

class Literal extends Token {
}

class StringLiteral extends Literal {
    constructor(theString: string) {
        value = theString
    }
    let value: string
}

class CharacterLiteral extends Literal {
    constructor(theString: string) {
        value = theString
    }
    let value: string
}

class NumericLiteral extends Literal {
    constructor(theValue: string) {
        value = theValue
    }
    let value: string
}

class Punctuation extends Token {
    constructor(theSign: string) {
        sign = theSign
    }
    let sign: string
}

class Operator extends Token {
    let operation: string
}

class PrefixOperator extends Operator {
    constructor(theOperation: string) {
        operation = theOperation
    }
}

class BinaryOperator extends Operator {
    constructor(theOperation: string) {
        operation = theOperation
    }
}

class PostfixOperator extends Operator {
    constructor(theOperation: string) {
        operation = theOperation
    }
}
