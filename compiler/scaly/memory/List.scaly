define List[T]
(
    head: pointer[Node[T]]
)
{
    init set head: null

    procedure add#r(this: List[T], element: T)
    {
        let new_node Node[T]#r(element, this.head)
        set this.head: new_node
    }

    procedure remove(this: List[T], element: T) returns bool
    {
        var node this.head
        var previous_node: pointer[Node[T]] null
        while node <> nullptr
        {
            if node*.element = element
            {
                if previous_node <> nullptr
                    set previous_node*.next: node*.next
                if node = head
                    set head: null
                return true
            }
            set previous_node: node
            set node: node*.next
        }

        false
    }

    function get_head(this: List[T]) returns T?
    {
        if this.head = null
            return null

        option(this.head*.element)
    }

    function count(this: List[T]) returns size_t
    {
        mutable list_iterator this.get_iterator()
        var i: size_t 0
        while list_iterator.next() <> null
            set i: i + 1
        i
    }

    function get_iterator(this: List[T]) returns ListIterator[T]
        ListIterator[T] this.head
}
