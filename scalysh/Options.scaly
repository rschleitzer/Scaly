namespace Scaly {

    class Options
    (
        files: Array[string]
        outputName: string
        directory: string
    ) {

        static function parseArguments(args: Array[string]): Options throws OptionsError {
            let length: number args.length()
            mutable output: string? ()
            mutable dir: string? ()
            var input: Array[string]$ Array[string](0)
            mutable i: number = 0
            while (i < length) {
                if (length < 2 or (not (args[i][0] = '-'))) {
                    input.push(args[i])
                    set i: i + 1
                    continue
                }
                switch (args[i][1]) {
                    case 'o' {
                        set i: i + 1
                        if (i = length) {
                            throw InvalidOptionException(args[i - 1]) }
                        else  {
                            output = args[i] }
                    }
                    case 'd' {
                        set i: i + 1
                        if (i = length) {
                            throw InvalidOptionException(args[i - 1]) }
                        else  {
                            dir = args[i] }
                    }
                    default {
                            throw UnknownOptionException(args[i]) }
                    }
                }
                i++
            }
            if (output = ()) {
                throw noOutputOption }
            if (input.length() = 0) {
                throw noFilesToCompile }

            return(new Options(Array[string](input), output, dir))
        }
    }
}