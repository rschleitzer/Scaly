using Scaly

function main(argc: int, argv: pointer): int {

    // Allocate the root page for the main thread
    posix_memalign(CurrentPage as pointer, pageSize, pageSize * maxStackPages)

    if (CurrentPage = ()) {
        return (-1)
    }

    CurrentPage.reset()

    mutable task: Task@CurrentPage = Task()
    set CurrentTask : task

    // Collect the arguments into a string Vector
    mutable arguments = Array`string`@CurrentPage(argc - 1)

    mutable i: int = 1
    while (i < argc) {
        arguments.Add(string@CurrentPage(argv[i]))
        set i: i + 1
    }

    // Call Scaly's top-level code
    var ret = Scaly.main(CurrentPage, arguments)

    // Only for monitoring, debugging and stuff
    CurrentTask.dispose()

    // Give back the return code of the top-level code
    return ret
}
