  <!DOCTYPE grammar SYSTEM "grammar.dtd">
  
  <grammar>

    <syntax id = Program                                        program
        <content identifier                                     property = name
        <content link = File                  multiple          property = files

    <syntax id = File                                           top
        <content link = Statement             multiple optional property = statements

    <syntax id = Statement                    multiple abstract
        <content link = Using
        <content link = Namespace
        <content link = Let
        <content link = Var
        <content link = Mutable
        <content link = Thread
        <content link = Set
        <content link = Calculation
        <content link = Function
        <content link = Class
        <content link = Constructor
        <content link = Method
        <content link = Break
        <content link = Continue
        <content link = Return
        <content link = Throw

    <syntax id = Using                                          base = Statement
        <content link = using
        <content link = Name                                    property = name

    <syntax id = Name                                           base = Expression
        <content identifier                                     property = name
        <content link = Extension             multiple optional property = extensions

    <syntax id = Extension                    multiple
        <content link = dot
        <content identifier                                     property = name

    <syntax id = Namespace                                      base = Statement
        <content link = namespace
        <content link = Name                                    property = name
        <content link = Block                                   property = scope

    <syntax id = Let                                            base = Statement
        <content link = let
        <content link = Binding                                 property = binding

    <syntax id = Var                                            base = Statement
        <content link = var
        <content link = Binding                                 property = binding

    <syntax id = Mutable                                        base = Statement
        <content link = mutable
        <content link = Binding                                 property = binding

    <syntax id = Thread                                         base = Statement
        <content link = thread
        <content link = Binding                                 property = binding

    <syntax id = Binding
        <content link = Name                                    property = name
        <content link = TypeAnnotation                 optional property = typeAnnotation
        <content link = Calculation                             property = calculation

    <syntax id = Set                                            base = Statement
        <content link = set
        <content link = Operation                               property = lValue
        <content link = colon
        <content link = Calculation                             property = rValue

    <syntax id = Calculation                                    base = Statement
        <content link = Operation                               property = operation
        <content link = semicolon                      optional
    
    <syntax id = Operation
        <content link = Operator              multiple          property = op

    <syntax id = Operator                     multiple          base = Statement
        <content link = Expression                              property = primary
        <content link = Postfix               multiple optional property = postfixes

    <syntax id = Postfix                      multiple abstract
        <content link = MemberAccess
        <content link = Subscript
        <content link = As
        <content link = Is
        <content link = Unwrap
        <content link = Catch

    <syntax id = MemberAccess                                   base = Postfix
        <content link = dot
        <content identifier                                     property = member

    <syntax id = Subscript                                      base = Postfix
        <content link = leftBracket
        <content link = Operation                               property = operation
        <content link = rightBracket

    <syntax id = As                                             base = Postfix
        <content link = as
        <content link = Type                                    property = typeSpec

    <syntax id = Is                                             base = Postfix
        <content link = is
        <content link = TypeSpec                                property = typeSpec

    <syntax id = Unwrap                                         base = Postfix
        <content link = exclamation

    <syntax id = Catch                                          base = Postfix
        <content link = catch
        <content link = CatchPattern                            property = typeSpec
        <content link = Block                                   property = handler

    <syntax id = CatchPattern                          abstract
        <content link = WildCardCatchPattern
        <content link = NameCatchPattern

    <syntax id = WildCardCatchPattern                           base = CatchPattern
        <content link = WildcardPattern                         property = pattern

    <syntax id = NameCatchPattern                               base = CatchPattern
        <content link = Name                           optional property = name
        <content link = leftParen
        <content identifier                            optional property = errorName
        <content link = rightParen

    <syntax id = Expression                   multiple abstract
        <content link = Block
        <content link = Name
        <content link = Constant
        <content link = If
        <content link = Switch
        <content link = For
        <content link = While
        <content link = Do
        <content link = This
        <content link = New
        <content link = Object
        <content link = SizeOf

    <syntax id = Block                                          base = Expression
        <content link = leftCurly
        <content link = Statement             multiple optional property = statements
        <content link = rightCurly

    <syntax id = Constant                                       base = Expression
        <content literal                                        property = literal

    <syntax id = If                                             base = Expression
        <content link = if
        <content link = leftParen
        <content link = Operation                               property = condition
        <content link = rightParen
        <content link = Block                                   property = consequent
        <content link = Else                           optional property = elseClause

    <syntax id = Else
        <content link = else
        <content link = Block                                   property = alternative

    <syntax id = Switch                                         base = Expression
        <content link = switch
        <content link = leftParen
        <content link = Operation                               property = condition
        <content link = rightParen
        <content link = leftCurly
        <content link = SwitchCase            multiple          property = cases
        <content link = rightCurly

    <syntax id = SwitchCase                   multiple
        <content link = CaseLabel                               property = label
        <content link = Block                                   property = content

    <syntax id = CaseLabel                             abstract
        <content link = ItemCaseLabel
        <content link = DefaultCaseLabel

    <syntax id = ItemCaseLabel                                  base = CaseLabel
        <content link = case
        <content link = CaseItem              multiple          property = items

    <syntax id = CaseItem                     multiple
        <content link = CasePattern                             property = pattern
        <content link = comma                          optional

    <syntax id = CasePattern                  multiple abstract
        <content link = ConstantPattern
        <content link = WildcardPattern
        <content link = NamePattern

    <syntax id = ConstantPattern                                base = CasePattern
        <content link = Constant                                property = constant

    <syntax id = WildcardPattern                                base = CasePattern
        <content link = underscore

    <syntax id = NamePattern                                    base = CasePattern
        <content link = Name                                    property = name

    <syntax id = DefaultCaseLabel                               base = CaseLabel
        <content link = default

    <syntax id = For                                            base = Expression
        <content link = for
        <content link = leftParen
        <content identifier                                     property = index
        <content link = TypeAnnotation                 optional property = typeAnnotation
        <content link = in
        <content link = Operation                               property = operation
        <content link = rightParen
        <content link = Loop                                    property = iteration

    <syntax id = While                                          base = Expression
        <content link = while
        <content link = leftParen
        <content link = Operation                               property = condition
        <content link = rightParen
        <content link = Loop                                    property = iteration

    <syntax id = Do                                             base = Expression
        <content link = do
        <content link = Loop                                    property = iteration
        <content link = while
        <content link = leftParen
        <content link = Operation                               property = condition
        <content link = rightParen

    <syntax id = Loop                                  abstract
        <content link = SimpleLoop
        <content link = NamedLoop

    <syntax id = SimpleLoop                                     base = Loop
        <content link = Block                                   property = code

    <syntax id = NamedLoop                                      base = Loop
        <content link = loop
        <content identifier                                     property = name
        <content link = Block                                   property = code

    <syntax id = This                                           base = Expression
        <content link = this

    <syntax id = New                                            base = Expression
        <content link = new
        <content link = Name                                    property = name
        <content link = GenericArguments               optional property = generics
        <content link = LifeTime                       optional property = lifeTime

    <syntax id = Object                                         base = Expression
        <content link = leftParen
        <content link = Operation                      optional property = firstOp
        <content link = Item                  multiple optional property = additionalOps
        <content link = rightParen

    <syntax id = Item                         multiple
        <content link = comma
        <content link = Operation                               property = operation

    <syntax id = SizeOf                                         base = Expression
        <content link = sizeof
        <content link = Type                                    property = typeSpec

    <syntax id = Break                                          base = Statement
        <content link = break
        <content identifier                            optional property = iteration
        <content link = semicolon                      optional

    <syntax id = Continue                                       base = Statement
        <content link = continue
        <content identifier                            optional property = iteration
        <content link = semicolon                      optional

    <syntax id = Return                                         base = Statement
        <content link = return
        <content link = Calculation                    optional property = result

    <syntax id = Throw                                          base = Statement
        <content link = throw
        <content link = Calculation                             property = exception

    <syntax id = Class                                          base = Statement
        <content link = class
        <content link = Name                                    property = name
        <content link = GenericParameters              optional property = generics
        <content link = Structure                         optional property = contents
        <content link = Extends                        optional property = baseClass
        <content link = Block                          optional property = body

    <syntax id = GenericParameters
        <content link = leftBracket
        <content identifier                                     property = name
        <content link = GenericParameter      multiple optional property = additionalGenerics
        <content link = rightBracket

    <syntax id = GenericParameter             multiple
        <content link = comma
        <content identifier                                     property = name

    <syntax id = Extends
        <content link = extends
        <content link = Name                                    property = name

    <syntax id = Structure
        <content link = leftParen
        <content link = Component             multiple optional property = components
        <content link = rightParen

    <syntax id = Component                    multiple
        <content identifier                                     property = name
        <content link = TypeAnnotation                 optional property = typeAnnotation
        <content link = comma                          optional

    <syntax id = Constructor                                    base = Statement
        <content link = constructor
        <content link = Structure                      optional property = input
        <content link = Block                                   property = body

    <syntax id = Method                                         base = Statement
        <content link = method
        <content link = Procedure                               property = procedure

    <syntax id = Function                                       base = Statement
        <content link = function
        <content link = Procedure                               property = procedure

    <syntax id = Procedure
        <content identifier                                     property = name
        <content link = Structure                      optional property = input
        <content link = TypeAnnotation                 optional property = output
        <content link = Throws                         optional property = throwsClause
        <content link = Block                                   property = body

    <syntax id = TypeAnnotation
        <content link = colon
        <content link = TypeSpec                                property = typeSpec

    <syntax id = TypeSpec                     multiple abstract
        <content link = Type
        <content link = Variant

    <syntax id = Type                         multiple          base = TypeSpec
        <content identifier                                     property = name
        <content link = GenericArguments               optional property = generics
        <content link = Optional                       optional property = optional
        <content link = LifeTime                       optional property = lifeTime

    <syntax id = Variant                                        base = TypeSpec
        <content link = leftParen
        <content link = TypeSpec              multiple optional property = types
        <content link = rightParen

    <syntax id = Throws
        <content link = throws
        <content link = TypeSpec                                property = throwsType

    <syntax id = GenericArguments
        <content link = leftBracket
        <content link = Type                                    property = generic
        <content link = GenericArgument       multiple optional property = additionalGenerics
        <content link = rightBracket

    <syntax id = GenericArgument              multiple
        <content link = comma
        <content link = Type                                    property = typeSpec

    <syntax id = Optional
        <content link = question

    <syntax id = LifeTime                              abstract
        <content link = Root
        <content link = Local
        <content link = Reference
        <content link = Thrown

    <syntax id = Root                                           base = LifeTime
        <content link = dollar

    <syntax id = Local                                          base = LifeTime
        <content link = at
        <content identifier                                     property = location

    <syntax id = Reference                                      base = LifeTime
        <content link = backtick
        <content literal                               optional property = age

    <syntax id = Thrown                                         base = LifeTime
        <content link = hash

    <keyword id = using
    <keyword id = namespace
    <keyword id = let
    <keyword id = mutable
    <keyword id = var
    <keyword id = thread
    <keyword id = set
    <keyword id = class
    <keyword id = extends
    <keyword id = constructor
    <keyword id = method
    <keyword id = function
    <keyword id = this
    <keyword id = new
    <keyword id = sizeof
    <keyword id = catch
    <keyword id = throws
    <keyword id = as
    <keyword id = is
    <keyword id = if
    <keyword id = else
    <keyword id = switch
    <keyword id = case
    <keyword id = default
    <keyword id = for
    <keyword id = in
    <keyword id = while
    <keyword id = do
    <keyword id = loop
    <keyword id = break
    <keyword id = continue
    <keyword id = return
    <keyword id = throw

    <punctuation id = semicolon         value = ";"
    <punctuation id = leftCurly         value = "{"
    <punctuation id = rightCurly        value = "}"
    <punctuation id = leftParen         value = "("
    <punctuation id = rightParen        value = ")"
    <punctuation id = leftBracket       value = "["
    <punctuation id = rightBracket      value = "]"
    <punctuation id = dot               value = "."
    <punctuation id = comma             value = ","
    <punctuation id = colon             value = ":"
    <punctuation id = question          value = "?"
    <punctuation id = exclamation       value = "!"
    <punctuation id = at                value = "@"
    <punctuation id = hash              value = "#"
    <punctuation id = dollar            value = "$"
    <punctuation id = underscore        value = "_"
    <punctuation id = backtick          value = "`"

  </grammar>
