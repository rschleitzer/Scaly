use Memory.Heap
use Memory.Stack
use Memory.StackBucket
use Memory.HeapBucket
use Memory.Page
use Memory.Page.'page size'

define Bucket union
(
    Stack
    (
        heap: pointer[Heap],
        private 'next bucket': pointer[StackBucket],
    )
    {
        procedure 'allocate page'(this) returns pointer[Page]
            heap*.allocate_page()

        procedure 'new page'(page: pointer[Page]) returns pointer[Page]
        {
            let 'page address' page.'cast to'['size type']()
            let 'stack bucket page address' 'page address' & (~('page size' * 'bucket pages' - 1))
            let 'overflowed page address' 'stack bucket page address' + 'page size' * 'bucket pages'
            let 'our page address' = 'page address' + 'page size'
            if 'overflowed page address' = 'our page address'
            {
                let bucket 'stack bucket page address' + 'size of'[Page]().'cast to'[pointer [Bucket]]()
                let 'stack bucket' bucket*.'cast to'[Stack]
                'stack bucket'*.'get page from next bucket'()
            }
            else
            {
                let 'our page' 'our page address'.'cast to'[pointer[Page]]()
                our_page*.reset()
                our_page
            }
        }

        private procedure 'get page from next bucket'(this) returns pointer[Page]
        {
            ; println!("get_page_from_next_bucket")
            if 'next bucket' = null
                set 'next bucket': create(heap)

            ; println!("self.next_bucket: {:X}", self.next_bucket as usize)
            Page.get('next bucket'.'cast to'['size type']())
        }

        function create(heap: pointer[Heap]) returns pointer[StackBucket]
        {
            ; println!("BEFORE Bucket::allocate_bucket")
            let page allocate_bucket()
            let bucket page*.allocate(Bucket.Stack(null, heap))
            ; println!("Bucket object:{:X}", bucket as usize)
            let 'stack bucket' bucket*.'cast to'[Stack]
            let 'stack bucket pointer' 'stack bucket'.'cast to'[pointer[StackBucket]]
            ; println!("Stack bucket object:{:X}", stack_bucket_pointer as usize)
            'stack bucket pointer'
        }

        function 'allocate bucket'() returns pointer[Page]
        {
            var page: pointer[Page] null
            allocate(page &.'cast to'[pointer[byte]](), 'page size' * 'bucket pages', 'page size' * 'bucket pages')
            page*.reset()
            page
        }

        procedure deallocate(this) {
            var bucket this &
            while bucket*.'next bucket' <> null
            {
                let 'next bucket' bucket*.'next bucket'
                let page Page.get(bucket.'cast to'[size type]())
                free(page.'cast to'[pointer[byte]]())
                ; println!("StackBucket: dealloc {:X}", page as usize)
                set bucket: 'next bucket'
            }
        }
    }
    Heap
    (
        pool: pointer[Pool],
        map: 'size type',
    )
    {
        procedure 'allocate page'(this) returns pointer[Page]
        {
            ; println!("HeapBucket self:{:X}", self as *const HeapBucket as usize)
            ; println!("HeapBucket map:{:X}", self.map)
            if map = 0
            {
                ; println!("self.pool: {:X}", self.pool as usize)
                pool*.'mark as full'(Page.get(this &.'cast to'['size type']()))
                return pool*.'allocate page'()
            }

            let position Bucket.'find least position'(map)
            ; println!("HeapBucket position: {}", position)
            let bit 1 << ('bucket pages' - position)
            ; println!("Bit for allocation: {:X}", bit)
            set map: map & ~bit

            let 'bucket base' this&.'cast to'['size type']()
            let 'page location''bucket base' + (position - 1) * 'page size'
            let page Page.get('page location').'cast to'[pointer[Page]]()
            ; println!("HeapBucket allocated page:{:X}", page as usize)

            page*.reset()

            if position = 1
                page*.'allocate raw'('size of'[Bucket](), 'align of'[Bucket]())

            if page = Page.get(pool.'cast to'['size type']())
                page*.'allocate raw'('size of'[Pool](), 'align of'[Pool]())

            page
        }

        procedure 'deallocate page'(this, page: pointer[Page])
        {
            let 'base page' Page.get(this &.'cast to'['size type']()).'cast to'['size type']()
            ; println!("HeapBucket about to de-allocate a page:{:X}", base_page)
            let distance page.'cast to'['size type']() - 'base page'
            let index distance / 'page size'
            ; if index > (BUCKET_PAGES - 1)
            ;    panic!("Position invalid for page {:X}", base_page)
            let position index + 1
            ; println!("Index to de-allocate: {}", position)
            let bit 1 << ('bucket pages' - position)
            ; println!("Bit for deallocation: {:X}", bit)
            ;if map & bit <> 0
            ;    panic!("Page {:X} was not allocated!", base_page)
            ; println!("self.map before deallocation: {:X}", self.map)
            set map: map | bit
            ; println!("self.map after deallocation: {:X}", self.map)
            if map = 'size type'.'maximum value'
                pool*.'mark as free'('base page')
        }
    }
)
{
    define 'bucket pages' 'size of'['size type']() * 8

    function get(address: 'size type') returns pointer[Bucket]
    {
        ; println!("address: {:X}", address);
        let 'address masked' address & ~('page size' * 'bucket pages' - 1)
        ; println!("address_masked: {:X}", address_masked);
        'address masked' + 'size of'[Page]().'cast to'[pointer[Bucket]]()
    }

    procedure 'allocate page'(this) returns pointer[Page]
    {
        match this
            case Stack(s)
                s.allocate_page()
            case Heap(h)
                h.allocate_page()
    }

    procedure 'deallocate page'(this, page: pointer[Page])
        this.'cast to'[Heap].'deallocate page'(page)

    function 'find least position'(n: 'size type') returns 'size type'
    {
        match 'bucket pages'
            case 64
                Bucket.'find least position 64'(n)
            case 32
                Bucket.'find least position 32'(n)
            ;_ => panic!(
            ;    "Scaly currently does not support {}bit architecture.",
            ;    BUCKET_PAGES
            ;),
        }
    }


    ; from http://stackoverflow.com/questions/11376288/fast-computing-of-log2-for-64-bit-integers
    private function 'find least position 64'(n: 'size type') returns 'size type'
    {
        define numbers 
        [
            0, 58, 1, 59, 47, 53, 2, 60, 39, 48, 27, 54, 33, 42, 3, 61, 51, 37, 40, 49, 18, 28, 20,
            55, 30, 34, 11, 43, 14, 22, 4, 62, 57, 46, 52, 38, 26, 32, 41, 50, 36, 17, 19, 29, 10,
            13, 21, 56, 45, 25, 31, 35, 16, 9, 12, 44, 24, 15, 8, 23, 7, 6, 5, 63,
        ]

        let n n | n >> 1
        let n n | n >> 2
        let n n | n >> 4
        let n n | n >> 8
        let n n | n >> 16
        let n n | n >> 32

        let product n 'convert to'['128 bit integer'] * 0x03f6eaf2cd271461

        let log = numbers[product 'convert to'['size type'] >> 58]
        ; println!("Log: {}", log);
        'bucket pages' - log
    }

    ; from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogDeBruijn
    private function 'find least position 32'(n: 'size type') returns 'size type'
    {
        define numbers
        [
            0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30, 8, 12, 20, 28, 15, 17, 24,
            7, 19, 27, 23, 6, 26, 5, 4, 31,
        ]

        let n n | n >> 1
        let n n | n >> 2
        let n n | n >> 4
        let n n | n >> 8
        let n n | n >> 16

        let log numbers[(n * 0x07C4ACDD) >> 27]
        'bucket pages' - log
    }
}