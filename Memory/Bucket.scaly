use Memory.Heap
use Memory.Stack
use Memory.StackBucket
use Memory.HeapBucket
use Memory.Page
use Memory.Page.'page size'

public define Bucket union
(
    Stack
    (
        heap: pointer[Heap],
        private 'next bucket': pointer[StackBucket],
    )
    {
    }
    Heap
    (
    )
    {
    }
)
{
    define 'bucket pages' 'size of'['size type']() * 8

    function get(address: 'size type') returns pointer[Bucket]
    {
        ; println!("address: {:X}", address);
        let 'address masked' address & ~('page size' * 'bucket pages' - 1)
        ; println!("address_masked: {:X}", address_masked);
        'address masked' + 'size of'[Page]() 'cast to'[pointer[Bucket]]()
    }

    procedure 'allocate page'(this) returns pointer[Page]
    {
        match this
            case Stack(s)
                s.allocate_page()
            case Heap(h)
                h.allocate_page()
    }

    procedure 'deallocate page'(this, page: pointer[Page])
    {
        match this
            case Heap(h)
                h.deallocate_page(page)
            ;Stack(_) => panic!(
            ;    "Tried to deallocate the page {:X} from a StackBucket.",
            ;    page as *const Page as usize
            ;),
    }

    function 'find least position'(n: 'size type') returns 'size type'
    {
        match 'bucket pages'
            case 64
                Bucket.'find least position 64'(n)
            case 32
                Bucket.'find least position 32'(n)
            ;_ => panic!(
            ;    "Scaly currently does not support {}bit architecture.",
            ;    BUCKET_PAGES
            ;),
        }
    }


    ; from http://stackoverflow.com/questions/11376288/fast-computing-of-log2-for-64-bit-integers
    private function 'find least position 64'(n: 'size type') returns 'size type'
    {
        define numbers 
        [
            0, 58, 1, 59, 47, 53, 2, 60, 39, 48, 27, 54, 33, 42, 3, 61, 51, 37, 40, 49, 18, 28, 20,
            55, 30, 34, 11, 43, 14, 22, 4, 62, 57, 46, 52, 38, 26, 32, 41, 50, 36, 17, 19, 29, 10,
            13, 21, 56, 45, 25, 31, 35, 16, 9, 12, 44, 24, 15, 8, 23, 7, 6, 5, 63,
        ]

        let n n | n >> 1
        let n n | n >> 2
        let n n | n >> 4
        let n n | n >> 8
        let n n | n >> 16
        let n n | n >> 32

        let product n 'convert to'['128 bit integer'] * 0x03f6eaf2cd271461

        let log = numbers[product 'convert to'['size type'] >> 58]
        ; println!("Log: {}", log);
        'bucket pages' - log
    }

    // from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogDeBruijn
    private function 'find least position 32'(n: 'size type') returns 'size type'
    {
        define numbers
        [
            0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30, 8, 12, 20, 28, 15, 17, 24,
            7, 19, 27, 23, 6, 26, 5, 4, 31,
        ]

        let n n | n >> 1
        let n n | n >> 2
        let n n | n >> 4
        let n n | n >> 8
        let n n | n >> 16

        let log = NUMBERS[(n * 0x07C4ACDD) >> 27]
        'bucket pages' - log
    }
}