use Memory.Bucket
use Memory.Allocation.allocate
use Memory.Allocation.free
use Memory.Allocation.'alignment of'
use Memory.Allocation.'size of'
use Memory.Allocation.write

define Page
(
    private 'current page': pointer[Page],
    private 'next object offset': integer,
    private 'exclusive pages': integer,
)
{
    define 'page size' 0x1000

    procedure reset(this)
    {
        set 'get extension page location'()* : null
        set 'next object offset': 'size of'[Page]()
        set 'exclusive pages': 0
        set 'current page': this
    }

    procedure clear(this)
    {
        'deallocate extensions'()
        reset()
    }

    function 'is oversized'(this) returns bool
        'current page' = null

    private function 'get extension page location'(this) returns pointer[pointer[Page]]
        ; Advance one page size so we are past the end of our page, then go back on pointer size
        this &.'cast to'['size type']() + 'page size'.'cast to'[pointer[pointer[Page]]]() - 1

    private function 'get next location'(this) returns 'size type'
        this to 'size type' + 'next object offset' to 'size type'

    private procedure 'set next location'(this, location: 'size type')
    {
        let 'location of this' = this &.'cast to'['size type']()
        set 'next object offset': location - 'location of this' to i32
    }

    private function 'get next exclusive page location'(this) returns pointer[pointer[Page]]
        'get extension page location'() - 'exclusive pages' - 1

    procedure allocate[T](this, object: T) returns pointer[T]
    {
        let memory 'allocate raw'('size of'[T](), 'alignment of'[T]()).'cast to'[pointer[T]]()

        ; Write into uninitialized memory.
        write(memory, object)

        memory
    }

    function 'get capacity'[T](this) returns 'size type'
    {
        let location 'get next location'()
        let alignment 'alignment of'[T]()
        let 'aligned location' (location + alignment - 1) & (~(alignment - 1))
        'get next exclusive page location'() to 'size type' - 'aligned location'
    }

    procedure 'allocate raw'(this, 'allocated size': 'size type', alignment: 'size type') returns pointer[byte]
    {
        if this <> 'current page'
        {
            ; We're already known to be full, so we delegate to the current page
            let 'new object' 'current page'*.'allocate raw'('allocated size', alignment)

            ; Possibly our current page was also full so we propagate back the new current page
            let 'allocating page' get('new object' as 'size type')
            if 'allocating page' <> 'current page' and (not ('allocating page'*.'is oversized'()))
            {
                set 'current page': 'allocating page'
            }

            return 'new object'
        }

        ; Try to allocate from ourselves
        let location 'get next location'()
        let 'aligned location' (location + alignment - 1) & ~(alignment - 1)
        let 'next location' 'aligned location' + 'allocated size'
        if 'next location' <= 'get next exclusive page location'() to 'size type'
        {
            'set next location' 'next location'
            return location.'cast to'[pointer[byte]]()
        }

        ; So the space did not fit.

        ; Calculate gross size to decide whether we're oversized
        if 'size of'[Page]() + 'allocated size' + 'size of'[pointer[pointer[Page]]]() > 'page size'
        {
            if 'get next location'() >= ('get next exclusive page location'() to size type)
                ; Allocate an extension page and try again with it
                return 'allocate extension page'()*.'allocate raw'('allocated size', alignment)

            let 'gross size' 'allocated size' + 'size of'[Page]()
            ; We allocate oversized objects directly.
            var page: pointer[Page] null
            allocate(page &.'cast to'[pointer[pointer[void]]](), 'page size', 'gross size')

            ; Oversized pages have no current page
            set page*.'current page': null

            ; Set the size since we will need it when deallocating
            set page*.'next object offset': 'gross size' % 0x100000000 to integer
            set page*.'exclusive pages': 'gross size' / 0x100000000 to integer

            set 'get next exclusive page location'()*: page
            set 'exclusive pages': 'exclusive pages' + 1
            return page + 1.'cast to'[pointer[byte]]()
        }

        ; So we're not oversized. Create extension page and let it allocate.
        'allocate extension page'()*.'allocate raw'('allocated size', alignment)
    }

    private procedure 'allocate extension page'(this) returns pointer[Page]
    {
        let page 'allocate page'()
        ; 'print line'("Allocated extension page: " (page to 'size type' 'to string'("X")))
        set 'get extension page location'()*: page
        set 'current page': page
        page
    }

    private procedure 'allocate page'(this) returns pointer[Page]
    {
        let bucket Bucket.get(this as 'size type')
        ; 'print line'("Bucket: ", bucket to 'size type' 'to string'("X"))
        let page bucket*.'allocate page'()
        page
    }

    procedure 'allocate exclusive page'(this) returns pointer[Page]
    {
        if this as pointer[Page] <> 'current page'
            ; We're already known to be full, so we delegate to the current page
            return 'current page'*.'allocate exclusive page'()

        ; Check first whether we need an ordinary extension
        if 'get next location'() to 'size type' >= 'get next exclusive page location'() to 'size type'
            ; Allocate an extension page with default size
            return 'allocate extension page'()*.'allocate exclusive page'()

        let page 'allocate page'()
        set 'get next exclusive page location'()*: page
        set 'exclusive pages': 'exclusive pages' + 1
        page
    }

    procedure extend(this, top: 'size type', size: 'size type') returns boolean
    {
        if top <> 'get next location'()
            return false

        let 'new top' top + size
        if 'new top' > 'get next exclusive page location'() to 'size type'
            return false

        'set next location' 'new top'

        true
    }

    procedure 'deallocate extensions'(this)
    {
        var page this &
        while page <> null
        {
            let 'extension pointer' page*.'get extension page location'()
            for i in from 1 to page*.'exclusive pages'
            {
                let 'exclusive page' = 'extension pointer' - i *
                if not('exclusive page'.'is oversized'())
                    'exclusive page'.'deallocate extensions'()

                'exclusive page'.forget()
            }

            if page <> (this &)
                page*.forget()

            set page: 'extension pointer'*
        }
    }

    function forget(this)
    {
        ;'print line'("Page: dealloc " this &.'cast to'['size type']() 'to string'("X"))
        if 'current page' = null
        {
            free(this &.'cast to'[pointer[void]]())
        }
        else
        {
            let bucket = Bucket.get(this &.'cast to'['size type']())
            ;'print line'("Bucket: ", bucket.'cast to'['size type']() 'to string'("X")));
            bucket*.'deallocate page'(this &)
        }
    }

    procedure 'reclaim array'(this, address: pointer[Page]) returns boolean
    {
        var page this &
        while page <> null
        {
            if page*.'deallocate exclusive page'(address)
                return true

            set page: page*.'get extension page location'()*
        }

        ; If we arrive here, we have a memory leak.
        false
    }

    function get(address: 'size type') returns pointer[Page]
        address & ~('page size' - 1).'cast to'[pointer[Page]]()

    function own(object: T) returns pointer[Page]
        get(object &.'cast to'['size type']())

    private procedure 'deallocate exclusive page'(this, page: pointer[Page]) returns boolean
    {
        ; Find the extension Page pointer
        var 'extension pointer' = 'get extension page location'() - 1
        let 'next extension page location' = 'get next exclusive page location'()
        while 'extension pointer' > 'next extension page location'
        {
            if 'extension pointer'* = page
                break

            set 'extension pointer': 'extension pointer' - 1
        }

        ; Report if we could not find it
        if 'extension pointer' = 'next extension page location'
            return false

        ; Shift the remaining array one position up
        while 'extension pointer' > 'next extension page location'
        {
            let 'pointer to pointer to page' 'extension pointer'
            set 'pointer to pointer to page'*: 'pointer to pointer to page' - 1 *
            set 'extension pointer': 'extension pointer'.offset - 1
        }

        ; Make room for one more extension
        set 'exclusive pages': 'exclusive pages' - 1
        page*.forget()

        true
    }
}