use scaly.containers

define EmptyToken()
define InvalidToken()
define ColonToken()

define IdentifierToken(name: Vector[char])
define AttributeToken(name: Vector[char])
define PunctuationToken(sign: char)
define StringToken(value: Vector[char])
define CharacterToken(value: Vector[char])
define FragmentToken(value: Vector[char])
define IntegerToken(value: Vector[char])
define BooleanToken(value: bool)
define FloatingPointToken(value: Vector[char])
define HexToken(value: Vector[char])

define LiteralToken union (
    String: StringToken
    Character: CharacterToken
    Fragment: FragmentToken
    Integer: IntegerToken
    Boolean: BooleanToken
    FloatingPoint: FloatingPointToken
    Hex: HexToken
)

define Token union (
    Empty: EmptyToken
    Invalid: InvalidToken
    Identifier: IdentifierToken
    Attribute: AttributeToken
    Punctuation: PunctuationToken
    Literal: LiteralToken
    Colon: ColonToken
)


define Lexer
(
    token: Token(EmptyToken())
    character: pointer[char](null)
    chars: StringIterator(StringIterator(String()))
    previous_position: size_t(0)
    position: size_t(0)
)
{
    init(deck: String) (Lexer()) {
        set chars: deck.get_iterator()
        read_character()
        skip_whitespace(true)
    }

    function read_character(this: Lexer) {
        set character: chars.next()
        if character <> null
            set position: position + 1        
    }

    function advance(this: Lexer) {
        set previous_position: position

        if character = null
            return

        let c *character

        if ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z'))
        {
            set token: scan_identifier()
            skip_whitespace(false)
            return
        }

        if (c >= '1') && (c <= '9')
        {
            set token: scan_integer_literal(character, 0)
            skip_whitespace(false)
            return
        }

        if c = '+' || c = '-' || c = '*' || c = '/' || c = '=' || c = '%' || c = '&' || c = '|' || c = '~' || c = '<' || c = '>'
        {
            set token: scan_operator()
            return
        }

        if c = '}' || c = ')' || c = ']' || c = '.' || c = '?' || c = '!' || c = '$' || c = '#' || c = '^'
        {
            set token: Token(PunctuationToken(*character))
            read_character()
            skip_whitespace(false)
            return
        }

        if c = '{' || c = '(' || c = '[' || c = ','
        {
            set token: Token(PunctuationToken(*character))
            read_character()
            skip_whitespace(true)
            return
        }

        match c
            case '\n'
                set token: scan_line_feed()

            case ':' 
            {
                read_character()
                set token: Token(ColonToken())
            }

            case '0'
                set token: scan_numeric_literal()

            case '@'
            {
                read_character()
                set token: scan_attribute()
            }

            case '\"'
                set token: scan_string_literal()

;            case '\''
;                set token: scan_string_identifier()

            case '`'
                set token: scan_fragment_literal()

            default
                set token: Token(InvalidToken())

        skip_whitespace(false)
    }

    function empty(this: Lexer) {
        set token: Token(EmptyToken())
    }

    function scan_line_feed(this: Lexer) returns Token$ {
        while true
        {
            read_character()
            skip_whitespace(false)
            if character = null
                return Token(ColonToken())

            if *character = '\n'
                continue

            return Token(ColonToken())
        }
    }

    function scan_identifier(this: Lexer) returns Token$ {
        let start character
        var length: size_t 0
        while true
        {
            if character = null
            {
                if length = 0
                {
                    return Token(InvalidToken())
                } else {
                    return Token(IdentifierToken(Vector<char>(start, length)))
                }
            } else {
                let c *character
                if ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9')) || (c = '_')
                {
                    read_character()
                    set length: length + 1
                } else {
                    return Token(IdentifierToken(Vector<char>(start, length)))
                }
            }
        }
    }

    function scan_attribute(this: Lexer) returns Token$ {
        let start character
        var length: size_t 0
        while true
        {
            if character = null
            {
                if length = 0
                {
                    return Token(InvalidToken())
                } else {
                    return Token(AttributeToken(Vector<char>(start, length)))
                }
            } else {
                let c *character
                if ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9')) || (c = '_')
                {
                    read_character()
                    set length: length + 1
                } else {
                    return Token(AttributeToken(Vector<char>(start, length)))
                }
            }
        }
    }

    function scan_operator(this: Lexer) returns Token$ {
        let start character
        var length: size_t 0
        while true
        {
            read_character()
            set length: length + 1
            if character = null
            {
                if length = 1
                {
                    return Token(InvalidToken())
                } else {
                    return Token(IdentifierToken(Vector<char>(start, length)))
                }
            }

            let c *character
            if c = '+' || c = '-' || c = '*' || c = '/' || c = '=' || c = '%' || c = '&' || c = '|' || c = '^' || c = '~' || c = '<' || c = '>'
                continue
            else
                return Token(IdentifierToken(Vector<char>(start, length)))
        }
    }

    function scan_string_literal(this: Lexer) returns Token$ {
        let start character + 1
        var length: size_t 0
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(InvalidToken())

            let c *character
            match c
                case '\"'
                {
                    read_character()
                    return Token(LiteralToken(StringToken(Vector<char>(start, length - 1))))
                }
                case '\\'
                {
                    read_character()
                    set length: length + 1
                    if character = null
                        return Token(InvalidToken())
                }

;            if c <> '\"' && c <> '\\' && c <> '\'' && c <> 'n' && c <> 'r' && c <> 't' && c <> '0'
;                return Token(InvalidToken())                            
        }
    }

    function scan_string_identifier(this: Lexer) returns Token$ {
        let start character + 1
        var length: size_t 0
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(InvalidToken())

            let c *character
;            match c
;                case '\''
;                    read_character()
;                        return Token(LiteralToken(CharacterToken(Vector<char>(start, length - 1))))
;                default
;                    break
        }
    }

    function scan_fragment_literal(this: Lexer) returns Token$ {
        let start character + 1
        var length: size_t 0
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(InvalidToken())

            match *character
;                case '`'
;                { 
;                    read_character()
;                    return Token(LiteralToken(FragmentToken(Vector<char>(start, length - 1))))
;                }

                case '\\' 
                {
                    read_character()
                    set length: length + 1
                    if character = null
                        return Token(InvalidToken())

                    match *character
                        case '`'
                            break
                        case '\\'
                            break
;                        case '\''
;                            break
                        case 'n'
                            break
                        case 'r'
                            break
                        case 't'
                            break
                        case '0'
                            break
                        default
                            return Token(InvalidToken())                            
                }

                default
                    break
        }
    }

    function scan_numeric_literal(this: Lexer) returns Token$ {
        let start character
        var length: size_t 0
        read_character()
        set length: length + 1
        if character = null
            return Token(LiteralToken(IntegerToken(Vector<char>(start, length))))

        let c *character

        if (c >= '0') && (c <= '9')
            return scan_integer_literal(start, length)

        match c
            case '.'
                return scan_fraction(start, length)
            case 'E'
                return scan_exponent(start, length)
            case 'e'
                return scan_exponent(start, length)
            case 'x'
                return scan_hex_literal(start, length)
            case 'B'
                return scan_boolean_literal()
            default
                return Token(LiteralToken(IntegerToken(Vector<char>(start, length))))
    }

    function scan_integer_literal(this: Lexer, start: pointer[char], length: size_t) returns Token$ {
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(LiteralToken(IntegerToken(Vector<char>(start, length))))

            let c *character

            if (c >= '0') && (c <= '9')
                continue

            match c
                case '.'
                    return scan_fraction(start, length)
                case 'E'
                    return scan_exponent(start, length)
                case 'e'
                    return scan_exponent(start, length)
                default
                    return Token(LiteralToken(IntegerToken(Vector<char>(start, length))))
        }
    }

    function scan_fraction(this: Lexer, start: pointer[char], length: size_t) returns Token$ {
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(LiteralToken(FloatingPointToken(Vector<char>(start, length))))

            let c *character

            if (c >= '0') && (c <= '9')
                continue

            match c
                case 'E'
                    return scan_exponent(start, length)
                case 'e'
                    return scan_exponent(start, length)
                default
                    return Token(LiteralToken(FloatingPointToken(Vector<char>(start, length))))
        }
    }

    function scan_exponent(this: Lexer, start: pointer[char], length: size_t) returns Token$ {
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(LiteralToken(FloatingPointToken(Vector<char>(start, length))))

            let c *character

            if ((c >= '0') && (c <= '9'))
                continue

            return Token(LiteralToken(FloatingPointToken(Vector<char>(start, length))))
        }
    }

    function scan_hex_literal(this: Lexer, start: pointer[char], length: size_t) returns Token$ {
        while true
        {
            read_character()
            set length: length + 1
            if character = null
                return Token(LiteralToken(HexToken(Vector<char>(start, length))))

            let c *character

            if ((c >= '0') && (c <= '9')) || (c >= 'A') && (c <= 'F') || ((c >= 'a') && (c <= 'f'))
                continue

            return Token(LiteralToken(HexToken(Vector<char>(start, length))))
        }
    }

    function scan_boolean_literal(this: Lexer) returns Token$ {
        read_character()
        if character = null
            return Token(InvalidToken())

        let c *character

        if c <> '0' && c <> '1'
        {
            return Token(InvalidToken())
        } else {
            read_character()
            return Token(LiteralToken(BooleanToken(c = '1')))
        }
    }

    function skip_whitespace(this: Lexer, skip_line_feed: bool) {
        while true
        {
            match (size_t)character
                case 0
                    return
                default
                {
                    match *character
                        case ' '
                        {
                            read_character()
                            continue
                        }
                        case '\t'
                        {
                            read_character()
                            continue
                        }
                        case '\r'
                        {
                            read_character()
                            continue
                        }
                        case '\n'
                            if (skip_line_feed)
                            {
                                read_character()
                                continue
                            } else {
                                return
                            }
                        case '\\'
                        {
                            read_character()
                                match (size_t)character
                                    case 0
                                        return
                                    default
                                    {
                                        match *character 
                                            case '\r'
                                            {
                                                read_character()
                                                read_character()
                                                continue
                                            }
                                            case '\n'
                                            {
                                                read_character()
                                                continue
                                            }
                                    }
                        }

                        case ';'
                        {
                            read_character()
                            match (size_t)character
                                case 0
                                    return
                                default
                                {
                                    if *character <> '*'
                                    {
                                        read_character()
                                        handle_single_line_comment()
                                    } else {
                                        read_character()
                                        handle_multi_line_comment()
                                    }
                                }
                        }
                        default
                            return
            }
        }
    }

    function handle_single_line_comment(this: Lexer) {
        while true
        {
            match (size_t)character
                case 0
                    return
                default
                {
                    if *character = '\n'
                    {
                        read_character()
                        return
                    } else {
                        read_character()
                        continue
                    }
                }
        }
    }

    function handle_multi_line_comment(this: Lexer) {
        while true
        {
            match (size_t)character
                case 0
                    return
                default
                {
                    match *character
                        case ';'
                        {
                            read_character()
                            match (size_t)character
                                case 0
                                    return
                                default
                                    match *character
                                        case '*'
                                            handle_multi_line_comment()
                                        default
                                            continue
                        }

                        case '*'
                        {
                            read_character()
                            match (size_t)character
                                case 0
                                    return
                                default
                                    match *character
                                        case ';'
                                            read_character()
                                            return
                        }
                        default
                        {
                            read_character()
                            continue
                        }
                }
        }
    }

    function parse_keyword(this: Lexer, fixed_string: String) returns bool {
        choose token
            when empty: Token.Empty advance()
            default {}

        choose token
            when identifier: Token.Identifier
            {
                let right_keyword fixed_string.equals(identifier.name)
                if right_keyword
                    empty()

                return right_keyword
            }
            default
                return false
    }

    function parse_identifier(this: Lexer, keywords: HashSet[String]) returns pointer[String] {
        var r Region()
        if token.tag = Token->Empty
            advance()

        match token.tag 
            case Token->Identifier
            {
                if keywords.contains(*String$(r.get_page(), token.Identifier_.name))
                    return null
                let ret String#(rp, token.Identifier_.name)
                empty()
                return ret
            }
            default
                return null
    }

    function parse_attribute(this: Lexer) returns pointer[String] {
        if token.tag = Token->Empty
            advance()

        match token.tag 
            case Token->Attribute
            {
                let ret String#(rp, token.Attribute_.name)
                empty()
                return ret
            }
            default
                return null
    }

    function parse_punctuation(this: Lexer, character: char) returns bool {
        if token.tag = Token->Empty
            advance()

        match token.tag 
            case Token->Punctuation
            {
                let ret character = token.Punctuation_.sign
                if ret
                    empty()

                return ret
            }
            default
                return false
    }

    function parse_colon(this: Lexer) returns bool {
        if token.tag = Token->Empty
            advance()

        match token.tag
            case Token->Colon
            {
                empty()
                return true
            }
            case Token->Empty
                return true

            default
                return false
    }

    function is_at_end(this: Lexer) returns bool {
        if character = null
            return true

        return false
    }
}