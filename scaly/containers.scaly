define containers {
    module Node
    module ListIterator
    module List
    module Vector
    module Array
    module BuilderListIterator
    module BuilderList
    module hashing
    module HashSetBuilder
    module HashSet
    module HashMapBuilder
    module HashMap
    module MultiMapBuilder
    module MultiMap
    module Result
    module String
    module StringIterator

    function test_vector() {
        var r Region()
        var vector Vector[int]$(r.get_page(), 2)
        set *(*vector).get(0): 1
        (*vector).put(1, 2)
        if *((*vector).get(0)) <> 1
            exit(-1)
        if *(*vector)[1] <> 2
            exit(-2)
    }

    function test_array()
    {
        var r Region()
        var array Array[int]$()

        ; A quarter gigabyte worth of ints
        let huge_number: int 1024 * 1024 * 64
        {
            var i: int 1
            while i <= huge_number
            {
                (*array).add(i)
                set i: i + 1
            }
        }
        
        let buffer: pointer[int] (*array).get_buffer()
        {
            var i: int 1
            while i <= huge_number
            {
                if *(buffer + i - 1) <> i
                    exit(-6)
                set i: i + 1
            }
        }
    }

    function test_string() {
        var r Region()
        var string String(r.get_page(), "Hello world!")
        let length string.get_length()
        if length <> 12
            exit(-7)
        var long_string String(r.get_page(), "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")
        if long_string.get_length() <> 130
            exit(-8)
        var c_string long_string.to_c_string(r.get_page())
        var string_c String(r.get_page(), c_string)

        var semi String(r.get_page(), ";")
        var dot String(r.get_page(), ".")
        if semi.equals(dot)
            exit(-9)
        var semi2 String(r.get_page(), ";")
        if semi.equals(semi2) <> true
            exit(-10)
    }

;*
    void test_string_builder() {
        Region _r
        StringBuilder& string_builder = *new(alignof(StringBuilder), _r.get_page()) StringBuilder()
        auto length = string_builder.get_length()
        if (length != 0)
            exit(-11)
        string_builder.append('a')
        string_builder.append('b')
        string_builder.append('c')
        if (!string_builder.to_string(_r.get_page()).equals("abc"))
            exit(-12)
        if (string_builder.get_length() != 3)
            exit(-13)

        StringBuilder& string_builder2 = *new(alignof(StringBuilder), _r.get_page()) StringBuilder('d')
        string_builder2.append('e')
        string_builder2.append('f')
        string_builder2.append('g')
        if (!string_builder2.to_string(_r.get_page()).equals("defg"))
            exit(-14)
        if (string_builder2.get_length() != 4)
            exit(-15)
        
        StringBuilder& string_builder3 = *new(alignof(StringBuilder), _r.get_page()) StringBuilder("hijk")    
        string_builder3.append("lmno")
        if (!string_builder3.to_string(_r.get_page()).equals("hijklmno"))
            exit(-16)
    }

    void test_list() {
        Region _r
        List<int>& list = *new(alignof(List<int>), _r.get_page()) List<int>()

        int huge_number = 1024 * 1024 * 62
        for (int i = 1 i <= huge_number  i++)
            list.add(i)

        auto iterator = list.get_iterator()
        for (int i = huge_number i >= 1 i--)
        {
            auto p = iterator.next()
            if (p == nullptr)
                exit(-16)

            if (*p != i)
                exit(-17)
        }
    }

    void test_hash_set() {
        Region _r

        Array<String>& array = *new(alignof(Array<String>), _r.get_page()) Array<String>()
        array.add(String(_r.get_page(), "using"))
        array.add(String(_r.get_page(), "namespace"))
        array.add(String(_r.get_page(), "typedef"))
        Vector<String> vector = Vector<String>(_r.get_page(), array)
        HashSetBuilder<String>& keywords_builder = *new(alignof(HashSetBuilder<String>), _r.get_page()) HashSetBuilder<String>(_r.get_page(), vector)
        if (!keywords_builder.contains(String(_r.get_page(), "using")))
            exit (-18)
        if (!keywords_builder.contains(String(_r.get_page(), "namespace")))
            exit (-18)
        if (!keywords_builder.contains(String(_r.get_page(), "typedef")))
            exit (-18)
        if (keywords_builder.contains(String(_r.get_page(), "nix")))
            exit (-18)
        HashSet<String>& keywords = *new(alignof(HashSet<String>), _r.get_page())  HashSet<String>(_r.get_page(), keywords_builder)
        if (!keywords.contains(String(_r.get_page(), "using")))
            exit (-19)
        if (!keywords.contains(String(_r.get_page(), "namespace")))
            exit (-19)
        if (!keywords.contains(String(_r.get_page(), "typedef")))
            exit (-19)
        if (keywords.contains(String(_r.get_page(), "nix")))
            exit (-19)
    }

    void test_hash_map() {
        {
            Region _r_1
            Array<KeyValuePair<String, int>>& array = *new(alignof(Array<KeyValuePair<String, int>>), _r_1.get_page()) Array<KeyValuePair<String, int>>()
            array.add(KeyValuePair<String, int> { .key = String(_r_1.get_page(), "using"), .value = 1 })
            array.add(KeyValuePair<String, int> { .key = String(_r_1.get_page(), "namespace"), .value = 2 })
            array.add(KeyValuePair<String, int> { .key = String(_r_1.get_page(), "typedef"), .value = 3 })
            Vector<KeyValuePair<String, int>> vector = Vector<KeyValuePair<String, int>>(_r_1.get_page(), array)
            HashMapBuilder<String, int>& keywords_builder = *new(alignof(HashMapBuilder<String, int>), _r_1.get_page()) HashMapBuilder<String, int>(_r_1.get_page(), vector)
            if (!keywords_builder.contains(String(_r_1.get_page(), "using")))
                exit (-18)
            if (!keywords_builder.contains(String(_r_1.get_page(), "namespace")))
                exit (-19)
            if (!keywords_builder.contains(String(_r_1.get_page(), "typedef")))
                exit (-20)
            if (keywords_builder.contains(String(_r_1.get_page(), "nix")))
                exit (-21)
            if (*keywords_builder[String(_r_1.get_page(), "using")] != 1)
                exit (-22)
            if (*keywords_builder[String(_r_1.get_page(), "namespace")] != 2)
                exit (-23)
            if (*keywords_builder[String(_r_1.get_page(), "typedef")] != 3)
                exit (-24)
            if (keywords_builder[String(_r_1.get_page(), "nix")] != nullptr)
                exit (-25)
            HashMap<String, int>& keywords = *new(alignof(HashMap<String, int>), _r_1.get_page()) HashMap<String, int>(_r_1.get_page(), keywords_builder)
            if (!keywords.contains(String(_r_1.get_page(), "using")))
                exit (-18)
            if (!keywords.contains(String(_r_1.get_page(), "namespace")))
                exit (-19)
            if (!keywords.contains(String(_r_1.get_page(), "typedef")))
                exit (-20)
            if (keywords.contains(String(_r_1.get_page(), "nix")))
                exit (-21)
            if (*keywords[String(_r_1.get_page(), "using")] != 1)
                exit (-22)
            if (*keywords[String(_r_1.get_page(), "namespace")] != 2)
                exit (-23)
            if (*keywords[String(_r_1.get_page(), "typedef")] != 3)
                exit (-24)
            if (keywords[String(_r_1.get_page(), "nix")] != nullptr)
                exit (-25)
        }
        {
            Region _r_1
            HashMapBuilder<String, size_t>& map = *new(alignof(HashMapBuilder<String, size_t>), _r_1.get_page()) HashMapBuilder<String, size_t>()
            HashSetBuilder<String>& set = *new(alignof(HashSetBuilder<String>), _r_1.get_page()) HashSetBuilder<String>()
            for (char i = 'A' i <= 'Z' i++)
            {
                for (char j = 'a' j <= 'z' j++)
                {
                    for (char k = '0' k <= '9' k++)
                    {
                        for (char l = '!' l <= '/' l++)
                        {
                            Region _r_2
                            StringBuilder& sb = *new(alignof(StringBuilder), _r_2.get_page()) StringBuilder(i)
                            sb.append(j)
                            sb.append(k)
                            sb.append(l)
                            map.add(sb.to_string(_r_1.get_page()), (size_t)i * j * k * l)
                            set.add(sb.to_string(_r_1.get_page()))
                        }
                    }
                }
            }
            for (char i = 'A' i <= 'Z' i++)
            {
                for (char j = 'a' j <= 'z' j++)
                {
                    for (char k = '0' k <= '9' k++)
                    {
                        for (char l = '!' l <= '/' l++)
                        {
                            Region _r_2
                            StringBuilder& sb = *new(alignof(StringBuilder), _r_2.get_page()) StringBuilder(i)
                            sb.append(j)
                            sb.append(k)
                            sb.append(l)
                            String theString = sb.to_string(_r_1.get_page())
                            if (!set.contains(theString))
                                exit(-26)
                            if (!map.contains(theString))
                                exit(-27)
                            if (*map[theString] != (size_t)i * j * k * l)
                                exit(-28)
                        }
                    }
                }
            }
        }
    }

    void test_multi_map() {
        {
            Region _r_1
            MultiMapBuilder<String, size_t>& map_builder = *new(alignof(MultiMapBuilder<String, size_t>), _r_1.get_page()) MultiMapBuilder<String, size_t>()
            for (char i = 'A' i <= 'Z' i++)
            {
                for (char j = 'a' j <= 'z' j++)
                {
                    for (char k = '0' k <= '9' k++)
                    {
                        for (char l = '!' l <= '/' l++)
                        {
                            Region _r_2
                            StringBuilder& sb = *new(alignof(StringBuilder), _r_2.get_page()) StringBuilder(i)
                            sb.append(j)
                            sb.append(k)
                            sb.append(l)
                            map_builder.add(sb.to_string(_r_1.get_page()), (size_t)i * j * k * l)
                            map_builder.add(sb.to_string(_r_1.get_page()), (size_t)i * j * k * l + 1)
                            map_builder.add(sb.to_string(_r_1.get_page()), (size_t)i * j * k * l + 2)
                        }
                    }
                }
            }
            MultiMap<String, size_t>& map = *new(alignof(MultiMap<String, size_t>), _r_1.get_page()) MultiMap<String, size_t>(_r_1.get_page(), map_builder)
            for (char i = 'A' i <= 'Z' i++)
            {
                for (char j = 'a' j <= 'z' j++)
                {
                    for (char k = '0' k <= '9' k++)
                    {
                        for (char l = '!' l <= '/' l++)
                        {
                            Region _r_2
                            StringBuilder& sb = *new(alignof(StringBuilder), _r_2.get_page()) StringBuilder(i)
                            sb.append(j)
                            sb.append(k)
                            sb.append(l)
                            String theString = (sb.to_string(_r_2.get_page()))
                            if (!map_builder.contains(theString))
                                exit(-27)
                            if (!map.contains(theString))
                                exit(-27)
                            if (*map_builder[theString]->get(0) != (size_t)i * j * k * l)
                                exit(-28)
                            if (*map[theString]->get(0) != (size_t)i * j * k * l)
                                exit(-28)
                            if (*map_builder[theString]->get(1) != (size_t)i * j * k * l + 1)
                                exit(-28)
                            if (*map[theString]->get(1) != (size_t)i * j * k * l + 1)
                                exit(-28)
                            if (*map_builder[theString]->get(2) != (size_t)i * j * k * l + 2)
                                exit(-28)
                            if (*map[theString]->get(2) != (size_t)i * j * k * l + 2)
                                exit(-28)
                        }
                    }
                }
            }
        }
    }
*;
    function test ()
    {
        test_vector()
        test_array()
        test_string()
;        test_string_builder()
;        test_list()
;        test_hash_set()
;        test_hash_map()
;        test_multi_map()
    }
}