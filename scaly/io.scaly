define io {
    module Console
    module FileError
    module Directory
    module File
    module Path

    function test_file() {
        var r Region()
        try let file_not_found File->read_to_string(r.get_page(), r.get_page(), String(r.get_page(), "foo"))
            catch error: FileError.NoSuchFileOrDirectory {
                try let text File->read_to_string(r.get_page(), r.get_page(), String(r.get_page(), "bar"))
                    drop exit(-2)
                if text.equals(String(r.get_page(), "baz")) = false
                    exit(-3)
            }
            drop exit(-4)
    }

    function test_path() {
        var r Region()

        let path String(r.get_page(), "../foo.scaly")
        var directory_name Path->get_directory_name(r.get_page(), path)
        if directory_name.equals(String(r.get_page(), "..")) = false
            exit(-4)

        var file_name Path->get_file_name(r.get_page(), String(r.get_page(), path))
        if file_name.equals(String(r.get_page(), "foo.scaly")) = false
            exit(-5)

        var joined_path Path->join(r.get_page(), directory_name, file_name)
        if joined_path.equals(path) = false
            exit(-6)

        set directory_name: Path->get_directory_name(r.get_page(), file_name)
        if directory_name.equals(String(r.get_page(), "")) = false
            exit(-7)
    }
;*
    void test_directory() {
        Region r

        let foo String(r.get_page(), "foo")
        {
            let dir_exists_result Directory->exists(r.get_page(), foo)
            if (dir_exists_result._tag =Result<bool, FileError>->Error)
                exit(-9)
            if (dir_exists_result._Ok)
                exit(-10)
        }
        {
            let dir_exists_result Directory->create(r.get_page(), foo)
            if (dir_exists_result !nullptr)
                exit(-11)
        }
        {
            let dir_exists_result Directory->exists(r.get_page(), foo)
            if (dir_exists_result._tag =Result<bool, FileError>->Error)
                exit(-12)
            if (!dir_exists_result._Ok)
                exit(-13)
        }
        {
            let dir_exists_result Directory->remove(r.get_page(), foo)
            if (dir_exists_result !nullptr)
                exit(-14)
        }
        {
            let dir_exists_result Directory->exists(r.get_page(), foo)
            if (dir_exists_result._tag =Result<bool, FileError>->Error)
                exit(-15)
            if (dir_exists_result._Ok)
                exit(-16)
        }
    }
*;
    function test () {
;        test_directory()
        test_path()
        test_file()
    }
}