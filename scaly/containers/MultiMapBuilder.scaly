define MultiMapBuilder[K, V]
(
    length: size_t (0)
    slots: pointer[Vector[BuilderList[Slot[KeyValuePair[K, pointer[Array[V]]]]]]] (null)
)
{
    function reallocate(this: MultiMapBuiler[K, V], size: size_t) {
        let hash_size hashing->get_prime(size)
        let slots_page (*Page->get(this)).allocate_exclusive_page()
        var new_slots Vector[BuilderList[Slot[KeyValuePair[K, pointer[Array[V]]]]]]^slots_page(slots_page, hash_size)

        if slots <> null
        {
            var vector_iterator VectorIterator[BuilderList[Slot[KeyValuePair[K, pointer[Array[V]]]]]](slots)
            while let element vector_iterator.next()
            {
                var list_iterator BuilderListIterator[Slot[KeyValuePair[K, pointer[Array[V]]]]]((*element).head)
                while let item list_iterator.next()
                {
                    let hash_code (*item).hash_code
                    let slot_number hash_code % (*new_slots).length
                    let slot_list (*new_slots)[slot_number]
                    (*slot_list).add(slots_page, *item)
                }
            }
            (*Page->get(this)).deallocate_exclusive_page(Page->get(slots))
        }
        set slots: new_slots
    }

    function add(this: MultiMapBuiler[K, V], key: K, value: V) {
        let hash_size hashing->get_prime(length + 1)
        if (slots = null || hash_size > (*slots).length)
            reallocate(length + 1)
        add_internal(key, value)
    }

    function add_internal(this: MultiMapBuiler[K, V], key: K, value: V) {
        let hash_code key.hash()
        let slot_number hash_code % (*slots).length
        let slot_list (*slots)[slot_number]
        var iterator (*slot_list).get_iterator()
        var array: pointer[Array[V]] null
        while let item iterator.next()
        {
            if (key.equals((*item).value.key))
                set array: (*item).value.value
        }

        if array = null
        {
            let page get_page()
            (*slot_list).add((*slots).get_page(), Slot[KeyValuePair[K, pointer[Array[V]]]] (
                KeyValuePair[K, pointer[Array[V]]] (key, Array[V]^page()), hash_code))

            set length: length + 1
            set array: (*(*slot_list).head).element.value.value
        }

        (*array).add(value)
    }

    function contains(this: MultiMapBuiler[K, V], key: K) returns bool {
        if slots = null
            return false

        let hash key.hash()
        let slot_number hash % (*slots).length
        let slot (*slots).get(slot_number)
        var iterator (*slot).get_iterator()
        while let item iterator.next()
        {
            if key.equals((*item).value.key)
                return true
        }

        return false
    }

    operator [](this: MultiMapBuiler[K, V], key: K) returns pointer[Array[V]] {
        if slots = null
            return null

        let slot (*slots).get(key.hash() % (*slots).length)
        var iterator (*slot).get_iterator()
        while let item iterator.next()
        {
            if key.equals((*item).value.key)
                return (*item).value.value
        }

        return null
    }
}
