define MultiMapIterator[K, V]
(
    slot_iterator: VectorIterator[Vector[KeyValuePair[K, Vector[V]]]]
    element_iterator: VectorIterator[KeyValuePair[K, Vector[V]]]
)
{
    init(multimap: MultiMap[K, V]) (slot_iterator(VectorIterator[Vector[KeyValuePair[K, Vector[V]]]](multimap.slots)), element_iterator(VectorIterator[KeyValuePair[K, Vector[V]]](slot_iterator.next()))) {}

    function next(this: MultiMapIterator[K, V]) returns pointer[Vector[V]] {
        while true
        {
            let ret element_iterator.next()
            if ret <> null
                return &(*ret).value
            
            let next_slot slot_iterator.next()
            if next_slot = null
                return null
            
            set element_iterator: VectorIterator[KeyValuePair[K, Vector[V]]](next_slot)
        }
    }
}

define MultiMap[K, V]
(
    slots: pointer[Vector[Vector[KeyValuePair[K, Vector[V]]]]] (null)
)
{
    init (rp: pointer[Page], multi_map_builder: MultiMapBuilder[K, V]) {
        var r Region()
        if multi_map_builder.length = 0
        {
            set slots: null
            return
        }

        set slots: Vector[Vector[KeyValuePair[K, Vector[V]]]]^rp(rp, (*multi_map_builder.slots).length)
        let length (*multi_map_builder.slots).length
        var i: size_t 0
        while i < length
        {
            var array Array[KeyValuePair[K, Vector[V]]]$()
            var list_iterator ListIterator[Slot[KeyValuePair[K, pointer[Array[V]]]]]((*(*multi_map_builder.slots).get(i)).head)
            while let item list_iterator.next()
                (*array).add(KeyValuePair[K, Vector[V]] ((*item).value.key, Vector[V](rp, *(*item).value.value)))
            if (*array).length > 0
                (*slots).put(i, Vector[KeyValuePair[K, Vector[V]]](rp, *array))
            set i: i + 1
        }
    }

    function contains(this: MultiMap[K, V], key: K) returns bool {
        if slots = null
            return false

        let hash key.hash()
        let slot_number hash % (*slots).length
        let slot (*slots).get(slot_number)
        let length (*slot).length
        var i: size_t 0
        while i < length
        {
            if (key.equals((*(*slot).get(i)).key))
                return true
                
            set i: i + 1
        }

        return false
    }

    operator [](key: K) returns pointer[Vector[V]] {
        if slots = null
            return null

        let hash key.hash()
        let slot_number hash % (*slots).length
        let slot (*slots).get(slot_number)
        let length (*slot).length
        var i: size_t 0
        while i < length
        {
            if (key.equals((*(*slot).get(i)).key))
                return &((*(*slot).get(i)).value)

            set i: i + 1
        }

        return nullptr
    }
}
