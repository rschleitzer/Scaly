define PACKED_SIZE: int 9

define String (data: pointer[char]) {
    init (rp: pointer[Page], length: size_t) {
        var length_array: char []PACKED_SIZE
        var rest length

        var counter: size_t 0
        while rest >= 0x80
        {
            set length_array[counter]: (char)rest | 0x80
            rest >>= 7;
            counter += 1;
        }

        set length_array[counter]: (char)rest
        let overall_length counter + 1 + length
        set data: (char*)(*rp).allocate_raw(overall_length, 1)
        memcpy(data, length_array, counter + 1)
    }

    init (rp: pointer[Page], other: pointer[const_char], length: size_t) {
        var length_array: char []PACKED_SIZE
        var rest length

        var counter: size_t 0
        while rest >= 0x80
        {
            set length_array[counter]: (char)rest | 0x80
            rest >>= 7;
            counter += 1;
        }

        set length_array[counter]: (char)rest
        let overall_length counter + 1 + length
        set data: (char*)(*rp).allocate_raw(overall_length, 1)
        memcpy(data, length_array, counter + 1)
        memcpy((pointer[void])(this.data + counter + 1), other, length)
    }

    init (rp: pointer[Page], other: Vector[char])
        (String(rp, other.data, other.length)) {}

    init (rp: pointer[Page], c_string: pointer[const_char])
        (String(rp, c_string, strlen(c_string))) {}

    init (rp: pointer[Page], other: String) {
        var length: size_t 0
        var bit_count 0
        var index 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                ; Bad string length
                exit(12)

            let byte *(other.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) = 0
                break;

            set bit_count: bit_count + 7
            set index: index + 1
        }
        var overall_length index + 1 + length
        set this.data: (char*)(*rp).allocate_raw(overall_length, 1)
        memcpy(this.data, other.data, overall_length)
    }

    init (rp: pointer[Page], character: char) {
        set this.data: (char*)(*rp).allocate_raw(2, 1)
        var zero 0
        set this.data[zero]: 1
        var one 1
        set this.data[one]: character
    }

    function get_buffer(this: String) returns pointer[char] {
        var length: size_t 0
        var bit_count 0
        var index: size_t 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                exit(11)

            var byte: char *(this.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) == 0
                break
            set bit_count: bit_count + 7
            set index: index + 1
        }

        return this.data + index + 1
    }

    function to_c_string(this: String, rp: pointer[Page]) returns pointer[const_char] {
        var length: size_t 0
        var bit_count 0
        var index: size_t 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                exit(11)

            var byte: char *(this.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) == 0
                break
            set bit_count: bit_count + 7
            set index: index + 1
        }

        var dest (*rp).allocate_raw(length + 1, 1)
        memcpy(dest, this.data + index + 1, length)
        set *((char*)dest + index + length): 0

        return (const_char*)dest
    }

    function get_length(this: String) returns size_t {
        var length: size_t 0
        var bit_count 0
        var index: size_t 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                exit(11)

            var byte: char *(this.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) == 0
                break
            set bit_count: bit_count + 7
            set index: index + 1
        }
        return result
    }

    function equals(this: String, other: String) returns bool {
        var length: size_t 0
        var bit_count 0
        var index: size_t 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                exit(11)

            var byte: char *(this.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) == 0
                break
            set bit_count: bit_count + 7
            set index: index + 1
        }
        return memcmp(this.data + index + 1, other.data + index + 1, length) = 0
    }

    function equals (this: String, other: Vector[char]) returns bool {
        var length: size_t 0
        var bit_count 0
        var index: size_t 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                exit(11)

            var byte: char *(this.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) == 0
                break
            set bit_count: bit_count + 7
            set index: index + 1
        }

        if length <> other.length
            return false

        return memcmp(this.data + index + 1, other.data, length) = 0
    }

    function hash(this: String) returns size_t {
        var length: size_t 0
        var bit_count 0
        var index: size_t 0
        while true
        {
            if bit_count = PACKED_SIZE * 7
                exit(11)

            var byte: char *(this.data + index)
            set length: length | ((size_t)(byte & 0x7F)) << bit_count
            if (byte & 0x80) == 0
                break
            set bit_count: bit_count + 7
            set index: index + 1
        }

        return scaly.containers.hash(this.data + index + 1, length)
    }
}
