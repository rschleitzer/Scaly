define HashSet[T]
(
    slots: pointer[Vector[Vector[T]]]
)
{
    init(rp: pointer[Page], hash_set_builder: HashSetBuilder[T]) {
        var r Region()
        if hash_set_builder.length = 0
        {
            set slots: nullptr
            return
        }

        set slots: Vector[Vector[T]]^rp(rp, (*hash_set_builder.slots).length)
        var length (*hash_set_builder.slots).length
        var i: size_t 0
        while i < length
        {
            var array Array[T]$()
            var list_iterator ListIterator[Slot[T]]((*(*hash_set_builder.slots).get(i)).head)
            while let item list_iterator.next()
                (*array).add((*item).value)
            if (*array).length > 0
                (*slots).put(i, Vector[T](rp, *array))

            set i: i + 1
        }
    }

    function contains(this: HashSet[T], value: T) returns bool {
        if slots = null
            return false

        let hash value.hash()
        let slot_number hash % (*slots).length
        let slot (*slots).get(slot_number)
        let length (*slot).length
        var i: size_t 0
        while i < length
        {
            if (value.equals(*(*slot).get(i)))
                return true

            set i: i + 1
        }

        return false
    }
}