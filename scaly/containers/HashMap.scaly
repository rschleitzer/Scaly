define HashMapIterator[K, V]
(
    slot_iterator: VectorIterator[Vector[KeyValuePair[K, V]]]
    element_iterator: VectorIterator[KeyValuePair[K, V]]
)
{
    init (hash_map: HashMap[K, V]) (slot_iterator(VectorIterator[Vector[KeyValuePair[K, V]]](hash_map.slots)), element_iterator(VectorIterator[KeyValuePair[K, V]](slot_iterator.next()))) {}

    function next() returns pointer[V] {
        while true
        {
            let ret = element_iterator.next()
            if ret <> null
                return &(*ret).value
            
            let next_slot = slot_iterator.next()
            if next_slot = null
                return null
            
            set element_iterator: VectorIterator[KeyValuePair[K, V]](next_slot)
        }
    }
}

define HashMap[K, V]
(
    slots: pointer[Vector[Vector[KeyValuePair[K, V]]]] (null)
)
{
    init (rp: pointer[Page], hash_map_builder: HashMapBuilder[K, V]) {
        var r: Region()
        if hash_map_builder.length = 0
        {
            set this.slots: null
            return
        }

        set this.slots: Vector[Vector[KeyValuePair[K, V]]]#r(rp, (*hash_map_builder.slots).length)
        let length (*hash_map_builder.slots).length
        var i: size_t 0
        while i < length
        {
            var array Array[KeyValuePair[K, V]]#r()
            var list_iterator = ListIterator[Slot[KeyValuePair[K, V]]]((*(*hash_map_builder.slots).get(i)).head)
            while item list_iterator.next()
                array.add((*item).value)
            if array.length > 0
                this.slots.put(i, Vector[KeyValuePair[K, V]](rp, array))

            set i: i + 1
        }
    }

    function contains(key: K) returns bool {
        if this.slots = null
            return false

        let hash key.hash()
        let slot_number hash % this->slots->length
        let slot this->slots->get(slot_number)
        let length slot->length
        var i: size_t 0
        while i < length
        {
            if (key.equals(slot->get(i)->key)) {
                return true
            }

            set i: i + 1
        }

        return false
    }

    operator [](const K& key) returns pointer[V] {
        if this.slots = null
            return null

        let hash key.hash()
        let slot_number hash % this->slots->length
        let slot this->slots->get(slot_number)
        let length slot->length
        var i: size_t 0
        while i < length
        {
            if key.equals(slot->get(i)->key)
                return &((*(*slot).get(i)).value)

            set i: i + 1
        }

        return nullptr
    }

    function get_values(rp: pointer[Page]) returns Vector[pointer[V]] {
        var r: Region()
        let array = Array[pointer[V]]#r()
        if this.slots
        {
            let slot_iterator VectorIterator[Vector[KeyValuePair[K, V]]](this.slots)
            while slot slot_iterator.next()
            {
                let element_iterator VectorIterator[KeyValuePair[K, V]](slot)
                while element element_iterator.next()
                    array.add(&element->value)
            }
        }

        return Vector[pointer[V]]#r(rp, array)
    }
}
