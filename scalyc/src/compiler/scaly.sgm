  <!DOCTYPE grammar SYSTEM "grammar.dtd">

  <grammar>

    <syntax id = Program                                        program
        <content link = File                  multiple          property = files

    <syntax id = File                                           top
        <content link = Declaration           multiple optional property = declarations
        <content link = Statement             multiple optional property = statements

    <syntax id = Declaration                  multiple abstract
        <content link = Definition
        <content link = Function
        <content link = Use

    <syntax id = Definition
        <content link = def
        <content link = Name                                    property = name
        <content link = Concept                                 property = concept
        <content link = semicolon                      optional

    <syntax id = Name
        <content identifier                                     property = name
        <content link = Extension             multiple optional property = extensions

    <syntax id = Extension                    multiple
        <content link = dot
        <content identifier                                     property = name

    <syntax id = Concept                              abstract
        <content link = Class
        <content link = Namespace
        <content link = Union
        <content link = Constant

    <syntax id = Class
        <content link = Structure                               property = structure
        <content link = Body                           optional property = body

    <syntax id = Namespace
        <content link = Body                                    property = body

    <syntax id = Union
        <content link = Tag                   multiple          property = tags

    <syntax id = Tag                          multiple
        <content link = Name                                    property = name
        <content link = Item                           optional property = item

    <syntax id = Item                                  abstract
        <content link = Variant
        <content link = Enum

    <syntax id = Variant
        <content link = Structure                               property = structure
        <content link = Body                           optional property = body

    <syntax id = Enum
        <content literal                                        property = literal

    <syntax id = Constant
        <content literal                                        property = literal

    <syntax id = Structure
        <content link = left_paren
        <content link = Component             multiple optional property = components
        <content link = right_paren

    <syntax id = Body
        <content link = left_brace
        <content link = Declaration           multiple optional property = declarations
        <content link = right_brace

    <syntax id = Component                    multiple
        <content identifier                                     property = name
        <content link = TypeAnnotation                 optional property = type_annotation
        <content link = comma                          optional

    <syntax id = Function
        <content link = fn
        <content link = TypeSpec                                property = operand
        <content link = TypeSpec                       optional property = operator
        <content link = TypeAnnotation                 optional property = type_annotation
        <content link = Implementation                 optional property = implementation
        <content link = semicolon                      optional

    <syntax id = Implementation                        abstract
        <content link = Expression
        <content link = Extern
        <content link = Instruction
        <content link = Intrinsic

    <syntax id = Use
        <content link = use
        <content link = Name                                    property = name
        <content link = semicolon                      optional

    <syntax id = Statement                   multiple abstract
        <content link = Calculation
        <content link = Let
        <content link = Var
        <content link = Mutable
        <content link = Set

    <syntax id = Let
        <content link = let
        <content link = Binding                                 property = binding

    <syntax id = Var
        <content link = var
        <content link = Binding                                 property = binding

    <syntax id = Mutable
        <content link = mutable
        <content link = Binding                                 property = binding

    <syntax id = Binding
        <content identifier                                     property = name
        <content link = TypeAnnotation                 optional property = type_annotation
        <content link = Calculation                             property = calculation

    <syntax id = Set
        <content link = set
        <content link = Operation                               property = target
        <content link = colon
        <content link = Calculation                             property = source

    <syntax id = Calculation
        <content link = Operation                               property = operation
        <content link = semicolon                      optional

    <syntax id = Operation
        <content link = Operand               multiple          property = op

    <syntax id = Operand                      multiple
        <content link = Expression                              property = primary
        <content link = Postfix               multiple optional property = postfixes

    <syntax id = Postfix                      multiple abstract
        <content link = MemberAccess
        <content link = Catch

    <syntax id = MemberAccess
        <content link = dot
        <content link = Name                                    property = member

    <syntax id = Catch
        <content link = catch
        <content link = CatchPattern                            property = type_spec
        <content link = Block                                   property = handler

    <syntax id = CatchPattern                          abstract
        <content link = WildCardCatchPattern
        <content link = TypeCatchPattern

    <syntax id = WildCardCatchPattern
        <content link = underscore

    <syntax id = TypeCatchPattern
        <content link = TypeSpec                                property = type_spec
        <content identifier                            optional property = error_name

    <syntax id = Expression                            abstract
        <content link = Literal
        <content link = Name
        <content link = Block

    <syntax id = Block
        <content link = left_brace
        <content link = Statement             multiple optional property = statements
        <content link = right_brace

    <syntax id = Literal
        <content literal                                        property = literal

    <syntax id = Extern
        <content link = extern

    <syntax id = Instruction
        <content link = instruction

    <syntax id = Intrinsic
        <content link = intrinsic

    <syntax id = TypeAnnotation
        <content link = colon
        <content link = TypeSpec                                property = type_spec

    <syntax id = TypeSpec                              abstract
        <content link = TypeName

    <syntax id = TypeName
        <content link = Name                                    property = name

    <keyword id = catch
    <keyword id = def
    <keyword id = extern
    <keyword id = fn
    <keyword id = instruction
    <keyword id = intrinsic
    <keyword id = let
    <keyword id = mutable
    <keyword id = set
    <keyword id = use
    <keyword id = var

    <punctuation id = semicolon         value = ";"
    <punctuation id = dot               value = "."
    <punctuation id = left_paren        value = "("
    <punctuation id = right_paren       value = ")"
    <punctuation id = left_brace        value = "{"
    <punctuation id = right_brace       value = "}"
    <punctuation id = comma             value = ","
    <punctuation id = colon             value = ":"
    <punctuation id = underscore        value = "_"

  </grammar>
