namespace scalyc {

class Parser(

    fileName: string,
    text: string

    ) {

    mutable lexer: Lexer new Lexer(text)

    let intrinsicKeyword: string = new string("intrinsic")
    let semicolon: string = new string(";")

    function parseFile(): File throws ParserError {
        let start: Position$ = lexer.getPreviousPosition()

        let intrinsics: Array[Intrinsic] = parseIntrinsicList()
        if (intrinsics <> null) {
            if (isAtEnd() = false) {
                let errorPos: Position$ = lexer.getPreviousPosition()
                throw syntax(errorPos.line, errorPos.column)
            }
        }

        let statements: Array[Statement] = parseStatementList()
        if (statements <> null) {
            if (isAtEnd() = false) {
                let errorPos: Position$ = lexer.getPreviousPosition()
                throw syntax(errorPos.line, errorPos.column)
            }
        }

        let end: Position$ lexer.getPosition()

        let ret: File new File(intrinsics, statements, new Position(start), new Position(end))
        if (intrinsics <> ()) {
            for (item: Intrinsic in intrinsics) {
                item.parent = ret }
        }
        if (statements <> ()) {
            for (item: Statement in statements) {
                item.parent = ret }
        }

        ret
    }

    method parseIntrinsicList(): Array[Intrinsic] {
        mutable ret: Array[Intrinsic]$ = null
        while (true) {

            let node: Intrinsic parseIntrinsic()
            if (node = ()) {
                break }

            if (ret = ()) {
                ret = new Array[Intrinsic]() }

            ret.add(node)
        }

        ret
    }

    function parseIntrinsic(): Intrinsic {
        let start: Position$ = lexer.getPreviousPosition()

        let success_intrinsic_1: bool = lexer.parseKeyword(intrinsicKeyword)
        if (success_intrinsic_1) {
            lexer.advance() }
        else {
            return () }

        let name: string = lexer.parseIdentifier()
        if ((name <> ()) && isIdentifier(name)) {
            lexer.advance() }
        else {
            return () }

        let end: Position$ lexer.getPosition()

        let ret: Intrinsic new Intrinsic(name, new Position(start), new Position(end))

        ret
    }

    method parseStatementList(): Array[Statement] {
        mutable ret: Array[Statement]$ = null
        while (true) {

            let node: Statement parseStatement()
            if (node = ()) {
                break }

            if (ret = ()) {
                ret = new Array[Statement]() }

            ret.add(node)
        }

        ret
    }

    function parseStatement(): Statement {
        {
            let node: Calculation = parseCalculation()
            if (node <> ()) {
                return node }
        }

        null
    }

    function parseCalculation(): Calculation {
        let start: Position$ = lexer.getPreviousPosition()

        let operation: Operation = parseOperation()
        if (operation = ()) {
            return () }

        let success_semicolon_2: bool = lexer.parsePunctuation(semicolon)
        if (success_semicolon_2) {
            lexer.advance() }

        let end: Position$ lexer.getPosition()

        let ret: Calculation new Calculation(operation, new Position(start), new Position(end))
        operation.parent = ret

        ret
    }

    function parseOperation(): Operation {
        let start: Position$ = lexer.getPreviousPosition()

        let op: Array[Operand] = parseOperandList()

        let end: Position$ lexer.getPosition()

        let ret: Operation new Operation(op, new Position(start), new Position(end))
        if (op <> ()) {
            for (item: Operand in op) {
                item.parent = ret }
        }

        ret
    }

    method parseOperandList(): Array[Operand] {
        mutable ret: Array[Operand]$ = null
        while (true) {

            let node: Operand parseOperand()
            if (node = ()) {
                break }

            if (ret = ()) {
                ret = new Array[Operand]() }

            ret.add(node)
        }

        ret
    }

    function parseOperand(): Operand {
        let start: Position$ = lexer.getPreviousPosition()

        let primary: Expression = parseExpression()
        if (primary = ()) {
            return () }

        let end: Position$ lexer.getPosition()

        let ret: Operand new Operand(primary, new Position(start), new Position(end))
        primary.parent = ret

        ret
    }

    function parseExpression(): Expression {
        {
            let node: Constant = parseConstant()
            if (node <> ()) {
                return node }
        }

        null
    }

    function parseConstant(): Constant {
        let start: Position$ = lexer.getPreviousPosition()

        let literal: Literal = lexer.parseLiteral()
        if (literal <> ()) {
            lexer.advance() }
        else {
            return () }

        let end: Position$ lexer.getPosition()

        let ret: Constant new Constant(literal, new Position(start), new Position(end))

        ret
    }

    function isAtEnd(): bool {
        lexer.isAtEnd()
    }

    function isIdentifier(id: string): bool {
        if (id.equals(intrinsicKeyword)) {
            return false }

        true
    }
}

class Visitor {
    function open_program(programSyntax: ProgramSyntax): bool {
        true
    }

    function close_program(programSyntax: ProgramSyntax) {
    }

    function open_file(fileSyntax: FileSyntax): bool {
        true
    }

    function close_file(fileSyntax: FileSyntax) {
    }

    function visit_intrinsic(intrinsicSyntax: IntrinsicSyntax) {
    }

    function open_calculation(calculationSyntax: CalculationSyntax): bool {
        true
    }

    function close_calculation(calculationSyntax: CalculationSyntax) {
    }

    function open_operation(operationSyntax: OperationSyntax): bool {
        true
    }

    function close_operation(operationSyntax: OperationSyntax) {
    }

    function open_operand(operandSyntax: OperandSyntax): bool {
        true
    }

    function close_operand(operandSyntax: OperandSyntax) {
    }

    function visit_constant(constantSyntax: ConstantSyntax) {
    }
}

class SyntaxNode (

    start: Position,
    end: Position

    ) {

    var parent: SyntaxNode? ()
}

class Program extends SyntaxNode (

    name: string, 
    files: Array[File]

    ) {
    function accept(visitor: Visitor) {

        if (visitor.openProgram(this) = false) {
            return }

        if (files <> ()) {
            for (node: File in files) {
                node.accept(visitor) } }

        visitor.closeProgram(this)
    }
}

class File extends SyntaxNode (

    intrinsics: Array[Intrinsic], 
    statements: Array[Statement]

    ) {
    function accept(visitor: Visitor) {

        if (visitor.openFile(this) = false) {
            return }

        if (intrinsics <> ()) {
            for (node: Intrinsic in intrinsics) {
                node.accept(visitor) } }

        if (statements <> ()) {
            for (node: Statement in statements) {
                node.accept(visitor) } }

        visitor.closeFile(this)
    }
}

class Intrinsic extends SyntaxNode (

    name: string

    ) {
    function accept(visitor: Visitor) {

        visitor.visitIntrinsic(this)
    }
}

class Statement extends SyntaxNode {
    function accept(visitor: Visitor) {
    }
}

class Calculation extends Statement (

    operation: Operation, 

    ) {
    function accept(visitor: Visitor) {

        if (visitor.openCalculation(this) = false) {
            return }
        operation.accept(visitor)

        visitor.closeCalculation(this)
    }
}

class Operation extends SyntaxNode (

    op: Array[Operand]

    ) {
    function accept(visitor: Visitor) {

        if (visitor.openOperation(this) = false) {
            return }

        if (op <> ()) {
            for (node: Operand in op) {
                node.accept(visitor) } }

        visitor.closeOperation(this)
    }
}

class Operand extends Statement (

    primary: Expression

    ) {
    function accept(visitor: Visitor) {

        if (visitor.openOperand(this) = false) {
            return }
        primary.accept(visitor)

        visitor.closeOperand(this)
    }
}

class Expression extends SyntaxNode {
    function accept(visitor: Visitor) {
    }
}

class Constant extends Expression (

    literal: Literal

    ) {
    function accept(visitor: Visitor) {

        visitor.visitConstant(this)
    }
}

} // namespace scalyc
