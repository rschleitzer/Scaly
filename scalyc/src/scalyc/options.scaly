namespace scalyc.options {

    class Options {

        files: Array[String]
        output_name: String
        directory: String

        function parse_arguments(var args: std.env.Args) : Options ! OptionsError {

            var output_name ""
            var directory ""
            var files: Array[String] []
            var first_argument true

            loop {
                let arg args.next()
                    catch return Options(output_name, directory, files)

                if first_argument {
                    set first_argument: false
                    continue
                }

                var char_iterator arg.chars()

                let first_char char_iterator.next()
                    catch throw NullLengthArgument

                if first_char <> '-' {
                    files.push(arg.clone())
                    continue
                }

                let second_char = char_iterator.next()
                    catch throw EmptyOption

                switch second_char {
                    'o': set output_name args.next()
                        catch throw InvalidOption(arg.clone())

                    'd': set directory args.next()
                        catch throw InvalidOption(arg.clone())

                    default: throw UnknownOption(arg.clone()))
                }
            }
        }
    }

    variant OptionsError {
        NullLengthArgument
        EmptyOption
        InvalidOption(string)
        UnknownOption(string)
    }
}
