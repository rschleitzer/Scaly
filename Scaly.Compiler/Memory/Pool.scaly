use Memory.Bucket
use Memory.Bucket.'bucket pages'
use Memory.Bucket.Heap
use Memory.Page
use Memory.Page.'page size'
use Memory.Allocation.allocate
use Memory.Allocation.free
use Memory.Allocation.'size of'

define Pool
(
    map: 'size type',
    private heap: pointer[Heap]
)
{
    function create(heap: pointer[Heap]) returns pointer[Pool]
    {
        var pool: pointer[Pool] null
        let 'pointer address' pool &.'cast to'[pointer[pointer[void]]]()
        let 'pool alignment' 'page size' * 'bucket pages'
        let 'pool size' 'pool alignment' * 'bucket pages'
        allocate('pointer address', 'pool size', 'pool alignment')
        ; println!("Pool memory: {:X}.", pool as usize)
        ;if pool = null
        ;    panic("Unable to create pool: Out of memory.")

        for i in from 0 to 'bucket pages'
        {
            let 'bucket page' pool.'cast to'['size type'] + 'pool alignment' * i.'cast to'[pointer[Page]]()
            ; println!("Bucket page: {}, {:X}.", i, bucket_page as usize)
            'bucket page'*.reset()
            let bucket = 'bucket page'*.allocate(Bucket.Heap(pool: null, map: 'size type'.'maximum value'))
            ; println!("Bucket initialized: {:X}.", bucket as usize)
            if i = 0
            {
                pool = 'bucket page'.allocate(Pool(map: 'size type'.'maximum value', heap: heap))
                ; println!("Pool object: {:X}.", pool as usize);
                ; println!("Pool map after creation: {:X}.", (*pool).map);
            }
            set bucket*.'cast to'[Bucket.Heap]().pool: pool
        }
        pool
    }

    procedure 'allocate page'(this) returns pointer[Page]
    {
        ; println!("Pool map before allocation: {:X}.", self.map)
        if map = 0
        {
            heap*.mark_as_full(this)
            return heap*.allocate_page()
        }

        let 'pool page address' = Page.get(this&.'cast to'['size type']).'cast to'['size type']()
        ; println!("Pool page address: {:X}.", pool_page_address);

        let position Bucket.'find least position'(map)
        ; println!("Pool least position: {}.", position)
        let 'bucket page address' 'pool page address' + 'page size' * 'bucket pages' * (position - 1)

        ; println!("Bucket page address: {:X}.", bucket_page_address)
        let bucket 'bucket page address' + 'size of'[Page]().'cast to'[pointer[Bucket]]
        ; println!("Bucket address: {:X}.", bucket as usize);
        bucket*.'allocate page'()
    }

    private function 'get allocation bit'(this, page: 'size type') returns 'size type'
    {
        let 'first bucket address' Page.get(this&.'cast to'['size type']()).'cast to'['size type']()
        let distance  page - 'first bucket address'
        let position = distance / 'page size' / 'bucket pages'
        1 << ('bucket pages' - 1 - position)
    }

    procedure 'mark as full'(this, page: 'size type')
    {
        let bit 'get allocation bit'(page)
        ; println!("Pool bit to be marked as full: {:X}", bit)
        set map: = map & ~bit
    }

    procedure 'mark as free'(this, page: 'size type')
    {
        let bit 'get allocation bit'(page)
        ; println!("Pool bit to be marked as free: {:X}", bit)
        let 'old map' = map
        set map: map | bit
        if 'old map' = 0
            heap*.'mark as free'(this)
    }

    procedure deallocate(this)
    {
        if map <> 'size type'.'maximum value'
            panic("Pool is not empty!")

        ; println!("Pool: dealloc {:X}", Page::get(self as *const Pool as usize) as usize)
        free(Page.get(this&.'cast to'['size type']()).'cast to'[pointer[void]]())
    }
}
